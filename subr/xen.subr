if [ ! "$_CBSD_XEN_SUBR" ]; then
_CBSD_XEN_SUBR=1
###

# generic function for xen
# required:
# strings.subr
#

. ${subrdir}/virtual.subr

[ -z "${XL_CMD}" ] && XL_CMD="/usr/local/sbin/xl"

init_xen_usage()
{
	echo
	${ECHO} "${N1_COLOR}Please follow ${H3_COLOR}https://wiki.freebsd.org/Xen ${N1_COLOR}and/or ${H3_COLOR}https://wiki.xen.org/wiki/FreeBSD_Dom0${N1_COLOR} instruction to setup FreeBSD host:${N0_COLOR}"
	echo
	${ECHO} "${H1_COLOR}*${N0_COLOR} pkg install ${H3_COLOR}sysutils/xen-tools emulators/xen-kernel${N0_COLOR}"
#	${ECHO} "${H1_COLOR}*${N0_COLOR} sysrc cloned_interfaces='bridge0'${N0_COLOR}"
#	${ECHO} "${H1_COLOR}*${N0_COLOR} sysrc ifconfig_bridge0='addm ${H3_COLOR}bge0${N0_COLOR} SYNCDHCP'${N0_COLOR}"
	${ECHO} "${H1_COLOR}*${N0_COLOR} sysrc xencommons_enable=YES${N0_COLOR}"
	if [ ${freebsdhostversion} -lt 1300100 ]; then
		${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'vm.max_wired=-1' >> /etc/sysctl.conf${N0_COLOR}"
	else
		${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'vm.max_user_wired=-1' >> /etc/sysctl.conf${N0_COLOR}"
	fi

	${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'xc0	"/usr/libexec/getty Pc"		xterm	onifconsole secure' >> /etc/ttys${N0_COLOR}"
	${ECHO} "${H1_COLOR}*${N0_COLOR} mkdir -p /var/lock /var/run/xen${N0_COLOR}"
	${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'xen_cmdline=\"dom0_mem=${H3_COLOR}2048M${N0_COLOR} dom0_max_vcpus=${H3_COLOR}2${N0_COLOR} dom0=pvh com1=115200,8n1 guest_loglvl=all loglvl=all vga=keep noreboot\"' >> /boot/loader.conf${N0_COLOR}"
	${ECHO} "${H1_COLOR}*${N0_COLOR} echo 'xen_kernel=\"/boot/xen\"' >> /boot/loader.conf${N0_COLOR}"
	echo
	${ECHO} "${N1_COLOR}Where ${H3_COLOR}bge0${N1_COLOR} is your uplink interface${N0_COLOR}"
	echo

	if [ ${freebsdhostversion} -lt 1201499 ]; then
		local _required_kmods="if_tap if_bridge"
	else
		local _required_kmods="if_tuntap if_bridge"
	fi

	${ECHO} "${N1_COLOR}Also ${N2_COLOR}${_required_kmods}${N1_COLOR} module should be loaded.${N0_COLOR}"
	exit 0
}


# test environment for xening
# init tmuxcmd
init_xen()
{
	local _host_ready=1
	local _i _res

	[ "${skip_xen_check_env}" = "1" ] && return 0		# all fine!

	if is_xen_dom0; then
		_host_ready=1
	else
		init_xen_usage
		exit 1
	fi

	if [ ${freebsdhostversion} -lt 1201499 ]; then
		local _required_kmods="if_tap if_bridge"
	else
		local _required_kmods="if_tuntap if_bridge"
	fi

#	${IFCONFIG_CMD} bridge0 > /dev/null 2>&1

#	if [ $? -ne 0 ]; then
#		${ECHO} "${N1_COLOR}init_xen : Interface ${N2_COLOR}bridge0${N1_COLOR} not exist${N0_COLOR}"
#		_host_ready=0
#	fi

	for _i in ${_required_kmods}; do
		if ! ${KLDSTAT_CMD} -qm ${_i} >/dev/null 2>&1; then
			${ECHO} "${N1_COLOR}No kldloaded module: ${N2_COLOR}${_i}${N0_COLOR}"
			${ECHO} "${N1_COLOR}Put ${N2_COLOR}kld_list=\"if_tuntap if_bridge\"${N1_COLOR} into your ${N2_COLOR}/etc/rc.conf${N1_COLOR} then reboot the host. Or, for example, run:${N0_COLOR}"
			${ECHO} "${N2_COLOR} sysrc kld_list+=\"if_tuntap if_tuntap if_bridge\" && service kld restart${N0_COLOR}"
			_host_ready=0
		fi
	done

	if [ ! -x "${XL_CMD}" ]; then
		${ECHO} "${N1_COLOR}No such: ${XL_CMD}${N0_COLOR}"
		_host_ready=0
	fi

	if [ ${_host_ready} -ne 1 ]; then
		init_xen_usage
		exit 1
	fi

	tmuxcmd=$( which tmux )
	[ -z "${tmuxcmd}" ] && err 1 "${N1_COLOR}Current version required for ${N2_COLOR}tmux${N1_COLOR}\nPlease ${N2_COLOR}pkg install tmux ${N1_COLOR} or ${N2_COLOR}make -C /usr/ports/sysutils/tmux install${N1_COLOR} it.${N0_COLOR}"

	lockedmemory=$( ${ULIMIT_CMD} -l | ${AWK_CMD} '{printf $1}' )
	if [ "${lockedmemory}" != "unlimited" ]; then
		# https://lists.freebsd.org/pipermail/freebsd-xen/2015-May/002391.html
		${ECHO} "${N1_COLOR}Xen requires for enlarged locked memory, see: ${N2_COLOR}ulimits -l${N0_COLOR}"
		${ECHO} "${N1_COLOR}Please set: ${N2_COLOR}memorylocked=unlimited${N1_COLOR} via ${N2_COLOR}/etc/login.conf${N1_COLOR} in default class, re-run:${N0_COLOR}"
		${ECHO} "${N2_COLOR}cap_mkdb /etc/login.conf${N0_COLOR}"
		err 1 "${N1_COLOR}and re-login${N0_COLOR}"
	fi
}

# export arguments for bhyve cd_args and cd_args2 (second boot after empty disk check)
# $iso_img must be present
compile_cd_args()
{
	cd_args=
	cd_args2=

	# Ubuntu has trouble when got two CD
	#[ "${vm_boot}" = "net" ] && return 0

	if [ -z "${iso_img}" ]; then
		${ECHO} "${N1_COLOR}iso_img variable is not set${N0_COLOR}"
		return 1
	fi

	if [ ! -r "${iso_img}" ]; then
		iso_img2=$( cbsdsqlro storage_media SELECT path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" LIMIT 1 )
		if [ ! -r ${iso_img2} ]; then
			${ECHO} "${N1_COLOR}iso_img in not readable: ${N2_COLOR}${iso_img} ${iso_img2}${N0_COLOR}"
			return 1
		else
			iso_img="${iso_img2}"
		fi
	fi

	if [ -z "${iso_img}" ]; then
		${ECHO} "${N1_COLOR}iso_img variable is empty: no ISO or image is not readable${N0_COLOR}"
		return 1
	fi

	## for check via ref
	# cd_args="-s ${bhyve_pci_index}:0,ahci-cd,${distdir}/upgrade/patch/efirefd.fd,ro"
	#if ! next_pci_id; then
	#	return 1
	#fi
	# cd_args="${cd_args} -s ${bhyve_pci_index}:0,ahci-cd,${iso_img}"

	if [ "${vm_os_type}" = "openbsd" ]; then
		# small hack: openbsd use install.fs as hdd drive, not cd
		cd_args="-s ${bhyve_pci_index}:0,ahci-hd,${iso_img},ro"
		cd_args2=""
	else
		cd_args="-s ${bhyve_pci_index}:0,ahci-cd,${iso_img}"
		cd_args2="-s ${bhyve_pci_index}:0,ahci-cd,/usr/local/cbsd/upgrade/patch/efirefd.fd,ro"
	fi
}

# export arguments for bhyve about dsk vms in $dsk_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_dsk_args; then
# 	echo $dsk_args
# else
#	echo "No disks"
# fi
compile_dsk_args()
{
	local dsk_id=0
	local sqldelimer=" "
	local prefix
	local full_dsk_path
	local XENCFG="${1}"
	local dsk_count=0
	local iso_count=0
	local iso_img2=
	local _media_count=0
	local first_count=0
	local _ascii _dev_letter _dev

	local xvd_num=0		# vxd + hd have same counter
	local sd_num=0

	dsk_count=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite 'SELECT COUNT(dsk_path) FROM xendsk' )

	iso_img2=$( cbsdsqlro storage_media SELECT path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" LIMIT 1 )

	[ -r ${iso_img2} ] && iso_count=$(( iso_count + 1 ))

	if [ -r ${iso_img} ]; then
		if [ "${iso_img}" = "${iso_img2}" ]; then
			iso_img2=
		else
			iso_count=$(( iso_count + 1 ))
		fi
	else
		iso_img=
	fi

	_media_count=$(( iso_count + dsk_count ))

	[ ${_media_count} -eq 0 ] && return 0

	# open disk brackets
	echo "disk = [" >> ${XENCFG}

	# temporary workaroung for Alex (CBSD Telegram) issue with no disk (old SQL schema) - don't select dsk_conf
	#	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot,dsk_conf FROM xendsk WHERE jname=\"${jname}\" AND dsk_type=\"vhd\" |while read dsk_controller dsk_path dsk_slot dsk_conf; do
	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot FROM xendsk WHERE dsk_type=\"vhd\" | while read dsk_controller dsk_path dsk_slot; do

		# test for full path. If path not started from '/' - append $data dir
		full_dsk_path=
		prefix=$( substr --pos=0 --len=1 --str="${dsk_path}" )

		if [ "${prefix}" != "/" ]; then
			full_dsk_path="${data}/${dsk_path}"
		else
			full_dsk_path="${dsk_path}"
		fi

		# for zvol
		# phy:${full_dsk_path} ?

		# detect proper drive letter (abc..)
		case "${dsk_controller}" in
			xvd|hd)
				_ascii=$(( 97 + xvd_num ))
				xvd_num=$(( xvd_num + 1 ))
				;;
			sd)
				_ascii=$(( 97 + sd_num ))
				sd_num=$(( sd_num + 1 ))
				;;
		esac

		_dev_letter=$( printf "\\$(printf %o ${_ascii} )" )
		_dev="${dsk_controller}${_dev_letter}"

		if [ ${first_count} -eq 0 ]; then
			# first record
			printf "'${full_dsk_path},raw,${_dev},rw'" >> ${XENCFG}
		else
			printf ", '${full_dsk_path},raw,${_dev},rw'" >> ${XENCFG}
		fi
		first_count=$(( first_count + 1 ))

		echo "xvd_num=${xvd_num}"
		echo "sd_num=${sd_num}"

	done ) || err 1 "${N1_COLOR}Error while create disk map${N0_COLOR}"

	if [ -n "${iso_img}" ]; then
		# cdrom
		dsk_controller="hd"		# always hd
		_ascii=$(( 97 + xvd_num ))
		xvd_num=$(( xvd_num + 1 ))
		_dev_letter=$( printf "\\$(printf %o ${_ascii} )" )
		_dev="${dsk_controller}${_dev_letter}"
		printf ", '${iso_img},raw,${_dev}:cdrom,r'" >> ${XENCFG}
	fi
	if [ -n "${iso_img2}" ]; then
		# secondary cdrom
		dsk_controller="hd"		# always hd
		_ascii=$(( 97 + xvd_num ))
		xvd_num=$(( xvd_num + 1 ))
		_dev_letter=$( printf "\\$(printf %o ${_ascii} )" )
		_dev="${dsk_controller}${_dev_letter}"
		printf ", '${iso_img2},raw,${_dev}:cdrom,r'" >> ${XENCFG}
	fi
	# Cloud-init support. Looking for seed.iso in sysdir
	if [ -r ${jailsysdir}/${jname}/seed.iso ]; then
		# cdrom for cloud-init
		dsk_controller="hd"		# always hd
		_ascii=$(( 97 + xvd_num ))
		xvd_num=$(( xvd_num + 1 ))
		_dev_letter=$( printf "\\$(printf %o ${_ascii} )" )
		_dev="${dsk_controller}${_dev_letter}"
		printf ", '${jailsysdir}/${jname}/seed.iso,raw,${_dev}:cdrom,r'" >> ${XENCFG}
	fi

	# close disk brackets
	printf "\n]\n" >> ${XENCFG}
	return 0
}

# print 5c:f9:dd:76:d5:c4 from 5cf9dd76d5c4
normalize_nic_hwaddr()
{
	local _hwaddr
	[ -z "${1}" ] && return 0

	_hwaddr=$( echo "${1}" | ${TR_CMD} -d ":"| ${SED_CMD} -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/' )
	printf ${_hwaddr}
}


# export arguments for xen about nic vms in $nic_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_nic_args; then
# 	echo $nic_args
# else
#	echo "No nic"
# fi
compile_nic_args()
{
	local _id=0 i _res taplist=
	local sqldelimer=" "
	local mybridge

	. ${subrdir}/vnet.subr		# for get_vm_uplink_interface

	local errmsg=

	# xstart.conf: clear VM hwaddr in global ARP table
	[ -z "${clean_arp_table_by_vm}" ] && clean_arp_table_by_vm="1"

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT id,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr FROM xennic WHERE jname=\"${jname}\" | while read nic_id nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr; do

		# when ip=0 and interface=auto we must use default interface for upstream
		if [ "${nic_parent}" = "0" -o "${nic_parent}" = "auto" ]; then
			_is_bridge=
			[ "${nic_parent}" != "auto" ] && _is_bridge=$( ${IFCONFIG_CMD} ${nic_parent} | ${AWK_CMD} '/groups:/{print $2}' | ${GREP_CMD} -o bridge )
			if [ "${_is_bridge}" != "bridge" ]; then
				# this is not bridge, detect uplink iface
				cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: ${nic_parent} is not bridge
				get_vm_uplink_interface -p ${nic_parent}
				cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: uplink interface selected: ${interface}

				if [ "${interface}" != "disable" ]; then
					# always up parent device
					[ "${interface}" != "auto" ] && ${IFCONFIG_CMD} ${interface} up
					cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: try to get bridge for interface: ${interface}
					if ! mybridge=$( get_my_device bridge ${interface} ); then
						err 1 "errmsg=\"Error:get_my_device_bridge_for_${interface}: ${mybridge}\""
					fi
					cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: bridge interface selected: ${mybridge}
				else
					# don't create/attach to bridge
					mybridge="disable"
				fi
			else
				${IFCONFIG_CMD} ${nic_parent} > /dev/null 2>&1
				_ret=$?
				[ ${_ret} -ne 0 ] && err 1 "errmsg=\"Error:no_such_bridge: ${nic_parent}. Please create it\""
				mybridge="${nic_parent}"
			fi
		else
			# don't create/attach to bridge
			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: try to get bridge for interface: ${interface}
			if ! mybridge=$( get_my_device bridge ${interface} ); then
				err 1 "errmsg=\"Error:get_my_device_bridge_for_${interface}: ${mybridge}\""
			fi
			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: bridge interface selected: ${mybridge}
		fi

		echo "export nic${_id}=\"${mybridge}\" ;"
		_id=$(( _id + 1 ))
	done ) || err 1 "${N1_COLOR}Error while creating nic map: ${errmsg}${N0_COLOR}"

	nic_args=

	# export in mytap fill list of vm NICs
	mytap=

	for i in $( ${SEQ_CMD} 0 31 ); do
		eval T="\$nic$i"
		eval taplist="\$mytap$i"
		[ -z "${T}" ] && break
		[ -z "${taplist}" ] && break
		nic_args="${nic_args} ${T}"
		if [ -z "${mytap}" ]; then
			mytap="${taplist}"
		else
			mytap="${mytap} ${taplist}"
		fi
	done

	[ -z "${nic_args}" ] && return 1

	return 0
}

# detach and remove disk image from xen VMs
# jname must be set
# $1 dsk_path from sql table (eg: dsk1.vhd )
# require: /usr/local/bin/cbsd as shell
xen_remove_dsk()
{
	local dsk="${1}"; shift
	[ -z "${jname}" -o -z "${dsk}" ] && return 0

	[ -r ${jailsysdir}/${jname}/local.sqlite ] && cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM xendsk WHERE dsk_path=\"${dsk}\" AND jname=\"${jname}\"

	if [ "${zfsfeat}" = "1" ]; then
		readconf zfs.conf
		. ${subrdir}/zfs.subr

		if is_getzvol ${data}/${dsk}; then
			${ZFS_CMD} destroy ${is_zvol}
		fi
	elif [ "${hammerfeat}" = "1" ]; then
		err 1 "Hammer not supported yet"
	else
		true
	fi

	[ -f "${data}/${dsk}" -o -h "${data}/${dsk}" ] && ${RM_CMD} -f "${data}/${dsk}"

	return 0
}

# detach and remove NIC from xen VMs
# jname must be set
# $1 is id of nic in SQL table
# require: /usr/local/bin/cbsd as shell
xen_remove_nic()
{
	local id="${1}"; shift
	[ -z "${jname}" -o -z "${id}" ] && return 0

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM xennic WHERE id=\"${id}\" AND jname=\"${jname}\"

	return 0
}


# export vncdisplay
compile_vnc_args()
{
	local vm_port
	local vnc_bind

	# spice by default?
	[ ${spice_default} -eq 1 ] && return 1

	local width height

	vnc_args=

	case "${vm_vnc_port}" in
		0)
			case "${xen_vnc_tcp_bind}" in
				0.0.0.0)
					_vnc_bind="127.0.0.1"
					;;
				::|\[::\])
					_vnc_bind="::1"
					;;
				*)
					_vnc_bind="${xen_vnc_tcp_bind}"
					;;
			esac
			# build skip list
			_vms=$( ${miscdir}/sqlcli ${dbdir}/local.sqlite "SELECT jname FROM jails WHERE emulator = \"xen\"" )
			for i in ${_vms}; do
				[ "${i}" = "${jname}" ] && continue             # its me
				[ ! -r ${jailsysdir}/${i}/local.sqlite ] && continue
				_tmpport=$( cbsdsqlro ${jailsysdir}/${i}/local.sqlite "SELECT vm_vnc_port FROM settings LIMIT 1" )
				if [ -n "${_tmpport}" ]; then
					if ! is_number ${_tmpport}; then
						[ ${_tmpport} -eq 0 ] && continue
						if [ -z "${_skip_ports}" ]; then
							_skip_ports="${_tmpport}"
						else
							_skip_ports="${_skip_ports} ${_tmpport}"
						fi
					else
						continue
					fi
				fi
			done
			vm_port=$( get-next-tcp-port address=${_vnc_bind} start_port=5900 end_port=6900 skip=\"${_skip_ports}\" )
			[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 5900-6900 range for ${_vnc_bind}${N0_COLOR}"
			cbsdlogger NOTICE ${CBSD_APP}: auto-detected free VNC port [skip for: ${_skip_ports}]: ${vm_port} for ${_vnc_bind}
##
			vnc_args="--vrde on --vrdeport ${vm_port}"
			vncdisplay=$(( ${vm_port} - 5900 ))
			${ECHO} "${N1_COLOR}VRDP is enabled. VNC port: ${N2_COLOR}${vm_port}. ${N1_COLOR}VNC pass: ${N2_COLOR}cbsd${N0_COLOR}${N0_COLOR}"
			;;
		1)
			vncdisplay=0
			vm_port=0
			vnc_args="--vrde off"
		;;
	*)
			vm_port=${vm_vnc_port}
			if [ ${vm_port} -ge 5900 ]; then
				vncdisplay=$(( ${vm_port} - 5900 ))
			else
				# unknown
				vncdisplay=0
			fi
			vnc_args="--vrde on --vrdeport ${vm_port}"
			;;
	esac

	# update vm_vnc_port in SQL and duplicate it in the ascii file
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE settings SET vm_vnc_port=\"${vm_port}\""
	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${xen_vnc_tcp_bind}" ]; then
		vnc_bind="${xen_vnc_tcp_bind}"
	else
		vnc_bind="${default_vnc_tcp_bind}"
	fi


	# add xen_vnc_tcp_ipconnect variables, used in
	# vncviewer promt and exported hooks variables
	if [ "${vnc_bind}" = "0.0.0.0" ]; then
		xen_vnc_tcp_ipconnect="${nodeip}"
	else
		xen_vnc_tcp_ipconnect="${vnc_bind}"
	fi


	if [ -n "${xen_vnc_resolution}" ]; then
		width=${xen_vnc_resolution%%x*}
		height=${xen_vnc_resolution##*x}
	else
		width="${default_vnc_width}"
		heigh="${default_vnc_height}"
	fi

	# add xen_vnc_tcp_ipconnect variables, used in
	# vncviewer prompt and exported hooks variables
	case "${vnc_bind}" in
		0.0.0.0)
			if [ -n "${nodeip}" ]; then
				xen_vnc_tcp_ipconnect="${nodeip}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		::|\[::\])
			if [ -n "${nodeip6}" ]; then
				xen_vnc_tcp_ipconnect="${nodeip6}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip6 variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		*)
			xen_vnc_tcp_ipconnect="${vnc_bind}"
			;;
	esac

	echo "${xen_vnc_tcp_ipconnect}" > ${jailsysdir}/${jname}/vnc_bind

	${ECHO} "${N1_COLOR}VRDP is enabled. VNC bind/port: ${N2_COLOR}${xen_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}For attach VM console, use: ${N2_COLOR}vncviewer ${xen_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}Resolution: ${N2_COLOR}${width}x${height}.${N0_COLOR}"
	[ -n "${vnc_password}" ] && ${ECHO} "${N1_COLOR}VNC pass: ${N2_COLOR}${vnc_password}${N0_COLOR}"

	if [ "${vnc_bind}" = "0.0.0.0" ]; then
		echo
		${ECHO} "${N1_COLOR}Warning!!! You are running a system with open ${N2_COLOR}VNC${N1_COLOR} port to the world wich is not secure${N0_COLOR}"
		${ECHO} "${N1_COLOR}Please use IP filter or balancer with password to restrict ${N2_COLOR}VNC${N1_COLOR} port access${N0_COLOR}"
		${ECHO} "${N1_COLOR}Or change vnc_bind params to ${N2_COLOR}127.0.0.1${N1_COLOR} and reboot VM after maintenance work${N0_COLOR}"
		echo
	fi

	return 0
}

# export vncdisplay
compile_spice_args()
{
	local vm_port
	local vnc_bind

	# spice not by default?
	[ ${spice_default} -eq 0 ] && return 1

	local width height

	vnc_args=

	case "${vm_vnc_port}" in
		0)
			case "${xen_spice_tcp_bind}" in
				0.0.0.0)
					_spice_bind="127.0.0.1"
					;;
				::|\[::\])
					_spice_bind="::1"
					;;
				*)
					_spice_bind="${xen_spice_tcp_bind}"
					;;
			esac
			# build skip list
			_vms=$( ${miscdir}/sqlcli ${dbdir}/local.sqlite "SELECT jname FROM jails WHERE emulator = \"xen\"" )
			for i in ${_vms}; do
				[ "${i}" = "${jname}" ] && continue             # its me
				[ ! -r ${jailsysdir}/${i}/local.sqlite ] && continue
				_tmpport=$( cbsdsqlro ${jailsysdir}/${i}/local.sqlite "SELECT vm_spice_port FROM settings LIMIT 1" )
				if [ -n "${_tmpport}" ]; then
					if ! is_number ${_tmpport}; then
						[ ${_tmpport} -eq 0 ] && continue
						if [ -z "${_skip_ports}" ]; then
							_skip_ports="${_tmpport}"
						else
							_skip_ports="${_skip_ports} ${_tmpport}"
						fi
					else
						continue
					fi
				fi
			done
			vm_port=$( get-next-tcp-port address=${_spice_bind} start_port=6000 end_port=7000 skip=\"${_skip_ports}\" )
			[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 6000-7000 range for ${_spice_bind}${N0_COLOR}"
			cbsdlogger NOTICE ${CBSD_APP}: auto-detected free Spice port [skip for: ${_skip_ports}]: ${vm_port} for ${_spice_bind}
##
			spice_args="--vrde on --vrdeport ${vm_port}"
			${ECHO} "${N1_COLOR}VRDP is enabled. Spice port: ${N2_COLOR}${vm_port}. ${N1_COLOR}Spicy pass: ${N2_COLOR}cbsd${N0_COLOR}${N0_COLOR}"
			;;
		1)
			vncdisplay=0
			vm_port=0
			spice_args="--vrde off"
		;;
	*)
			vm_port=${vm_spice_port}
			spice_args="--vrde on --vrdeport ${vm_port}"
			;;
	esac

	vncdisplay="${vm_port}"

	# update vm_vnc_port in SQL and duplicate it in the ascii file
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE settings SET vm_spice_port=\"${vm_port}\""
	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${xen_spice_tcp_bind}" ]; then
		spice_bind="${xen_spice_tcp_bind}"
	else
		spice_bind="${default_spice_tcp_bind}"
	fi

	# add xen_vnc_tcp_ipconnect variables, used in
	# vncviewer promt and exported hooks variables
	if [ "${spice_bind}" = "0.0.0.0" ]; then
		xen_spice_tcp_ipconnect="${nodeip}"
	else
		xen_spice_tcp_ipconnect="${spice_bind}"
	fi

#	if [ -n "${xen_vnc_resolution}" ]; then
#		width=${xen_vnc_resolution%%x*}
#		height=${xen_vnc_resolution##*x}
#	else
#		width="${default_vnc_width}"
#		heigh="${default_vnc_height}"
#	fi

	${ECHO} "${N1_COLOR}VRDP is enabled. SPICE bind/port: ${N2_COLOR}${xen_spice_tcp_ipconnect}:${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}For attach VM console, use: ${N2_COLOR}spicy -h ${xen_spice_tcp_ipconnect} -p ${vm_port}${N0_COLOR}"
	[ -n "${spice_password}" ] && ${ECHO} "${N1_COLOR}SPICE pass: ${N2_COLOR}${spice_password}${N0_COLOR}"

	case "${spice_bind}" in
		0.0.0.0)
			if [ -n "${nodeip}" ]; then
				xen_spice_tcp_ipconnect="${nodeip}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		::|\[::\])
			if [ -n "${nodeip6}" ]; then
				xen_spice_tcp_ipconnect="${nodeip6}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip6 variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		*)
			bhyve_spice_tcp_ipconnect="${vnc_bind}"
			;;
	esac

	if [ "${spice_bind}" = "0.0.0.0" ]; then
		echo
		${ECHO} "${N1_COLOR}Warning!!! You are running a system with open ${N2_COLOR}SPICE${N1_COLOR} port to the world wich is not secure${N0_COLOR}"
		${ECHO} "${N1_COLOR}Please use IP filter or balancer with password to restrict ${N2_COLOR}SPICE${N1_COLOR} port access${N0_COLOR}"
		${ECHO} "${N1_COLOR}Or change spice_bind params to ${N2_COLOR}127.0.0.1${N1_COLOR} and reboot VM after maintenance work${N0_COLOR}"
		echo
	fi

	return 0
}



# -j ${jname}
# return 0 when no VM process exist by $jname
# return 1 when VM process exist with $jname + return $vm_pid and $vm_state variables
# e.g: check_for_xen_process -j vm1
check_for_xen_process()
{
	local jname b_jname _state _domid
	unset vm_pid vm_state

	while getopts "j:" opt; do
		case "${opt}" in
			j) jname="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${jname}" ] && return 0

	_state=$( ${XL_CMD} list ${jname} > /dev/null 2>&1 )
	[ $? -ne 0 ] && return 0
	_domid=$( ${XL_CMD} domid ${jname} )
	. ${strings}

	local search_cmd=" -xen-domid ${_domid} "

	eval $( ${PS_CMD} axopid,state,ucomm,command -ww | while read pid state ucomm command; do
		case ${ucomm} in
			qemu-system-i386)
				;;
			*)
				continue
				;;
		esac

		if echo "${command}" | ${GREP_CMD} -q "${search_cmd}" 2>/dev/null; then
			echo vm_state=\"${state}\"
			echo vm_pid=\"${pid}\"
		fi
	done )

	[ -z "${vm_pid}" ] && return 0
	return 1
}

# return 0 if current host is XEN dom0
# if is_xen_dom0; then
#   echo "XeN"
# fi
is_xen_dom0()
{
	local _ret
	[ ! -d /dev/xen ] && return 1
	[ ! -x ${_xen_cmd} ] && return 1
	${XL_CMD} info > /dev/null 2>&1
	_ret=$?
	return ${_ret}
}

###
fi

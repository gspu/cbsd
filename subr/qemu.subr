if [ ! "$_CBSD_QEMU_SUBR" ]; then
_CBSD_QEMU_SUBR=1
###

# generic function for qemu
# required:
# strings.subr
#

. ${subrdir}/virtual.subr

[ -z "${XL_CMD}" ] && XL_CMD="/usr/local/sbin/xl"

# return 0 or 1 if $1 bus id exist in global $qemu_pci_id_busy_list
#  if is_qemu_pci_id_busy 5; then
#         echo "EXIST"
#  fi
#
# if ! is_qemu_pci_id_busy 5; then
#        echo "NOT EXIST"
# fi
is_qemu_pci_id_busy()
{
	local _id="${1}"
	local _i
	local _buf_file="${jailsysdir}/${jname}/qemu_pciid"

	# use $_buf_file as an intermediate buffer for share
	# and exchange $qemu_pci_id_busy_list vars
	[ -r ${_buf_file} ] && . ${_buf_file}

	# free
	[ -z "${qemu_pci_id_busy_list}" ] && return 1

	for _i in ${qemu_pci_id_busy_list}; do
		[ ${_i} -eq ${_id} ] && return 0		# already exist
	done

	# free
	return 1
}

# add new $1 bus id in $qemu_pci_id_busy_list array
add_qemu_pci_id_busy()
{
	local _id="${1}"
	local _buf_file="${jailsysdir}/${jname}/qemu_pciid"

	if is_qemu_pci_id_busy ${_id}; then
		# already in list
		return 0
	fi

	qemu_pci_id_busy_list="${qemu_pci_id_busy_list} ${_id}"

	# use $_buf_file as an intermediate buffer for share
	# and exchange $qemu_pci_id_busy_list vars
	/usr/local/cbsd/misc/cbsdsysrc -qf ${_buf_file} qemu_pci_id_busy_list="${qemu_pci_id_busy_list}" > /dev/null 2>&1

	return 0
}

# -a _pcislot_bus
# -b _pcislot_pcislot
# -c _pcislot_function
# -n - device name: fbuf,..
# -d - device descr/args, e.g <path_to_device>
store_qemu_pci_slot()
{
	local _pcislot_bus=0
	local _pcislot_pcislot=0
	local _pcislot_function=0
	local _pcislot_name=
	local _pcislot_desc=
	local _mydb _i _res

	while getopts "a:b:c:d:n:" opt; do
		case "${opt}" in
			a) _pcislot_bus="${OPTARG}" ;;
			b) _pcislot_pcislot="${OPTARG}" ;;
			c) _pcislot_function="${OPTARG}" ;;
			d) _pcislot_desc="${OPTARG}" ;;
			n) _pcislot_name="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	_mydb="${jailsysdir}/${jname}/local.sqlite"

	[ -z "${_pcislot_name}" ] && err 1 "store_qemu_pci_slot: name is empty"

	for _i in _pcislot_bus _pcislot_pcislot _pcislot_function; do
		eval _res="\${${_i}}"
		if is_number ${_res}; then
			err 1 "store_qemu_pci_slot: ${_i} is not number: ${_res}"
		fi
	done

	local _search_condition
	local _tmp_qemu_pci_index=

	# store into temporary pcibus map to determine/avoid bus id collision
	cbsdsqlrw ${_mydb} "INSERT INTO pcibus_run ( pcislot_name,pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc,modified ) VALUES ( \"${_pcislot_name}\", \"${_pcislot_bus}\", \"${_pcislot_pcislot}\", \"${_pcislot_function}\", \"${_pcislot_desc}\", true )"

	_search_condition="pcislot_name=\"${_pcislot_name}\""
	[ -n "${_pcislot_desc}" ] && _search_condition="${_search_condition} AND pcislot_desc=\"${_pcislot_desc}\""
	_tmp_qemu_pci_index=$( cbsdsqlro ${_mydb} SELECT pcislot_bus FROM pcibus WHERE ${_search_condition} LIMIT 1 | ${AWK_CMD} '{printf $1}' )

	if [ -n "${_tmp_qemu_pci_index}" ]; then
		# update modified flags
		cbsdsqlrw ${_mydb} "UPDATE pcibus SET modified=true WHERE ${_search_condition}"
		[ "${_tmp_qemu_pci_index}" = "${_pcislot_bus}" ] && return 0		# record already exist (todo: check for bus/func equal
		# pci slot not equal, update
		cbsdsqlrw ${_mydb} "UPDATE pcibus SET pcislot_bus=\"${_pcislot_bus}\" WHERE ${_search_condition}"
	else
		# store pci bus map
		cbsdsqlrw ${_mydb} "INSERT INTO pcibus ( pcislot_name,pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc,modified ) VALUES ( \"${_pcislot_name}\", \"${_pcislot_bus}\", \"${_pcislot_pcislot}\", \"${_pcislot_function}\", \"${_pcislot_desc}\", true )"
	fi
}

# autoincrement for $qemu_pci_index variable which symbolizes pci id bus
# -e end bus range range (e.g: -e 31), default: 31
# -o (order): next or prev (default is: next)
# -s start bus range (e.g: -s 4), default: 3
# -n - device name: fbuf,..
# -d - device descr/args, e.g <path_to_device>
# when (-n name) and/or (-d descr) is specified,
# lookup for stored pciid information first to
# get old settings
# 0 - reserved for hostbridge
# 1 - reserved for ReFIND device
# 2 - reserved for boot device
# normal use:
#   if ! next_pci_id; then
#     # no free pci bus
#     exit 0
#   fi
# or:
#   if ! next_pci_id -n fbuf; then
#     # no free pci bus
#     exit 0
#   fi
#
next_pci_id()
{
	local _start_bus_id=4 _end_bus_id=31 _order="next"
	local _pcislot_name=
	local _pcislot_desc=
	local _res

	while getopts "d:e:n:o:s:" opt; do
		case "${opt}" in
			e) _end_bus_id="${OPTARG}" ;;
			o) _order="${OPTARG}" ;;
			s) _start_bus_id="${OPTARG}" ;;
			d) _pcislot_desc="${OPTARG}" ;;
			n) _pcislot_name="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	# lookup database stored first
	if [ -n "${_pcislot_name}" ]; then
		local _mydb
		local _search_condition
		local _tmp_qemu_pci_index=

		_mydb="${jailsysdir}/${jname}/local.sqlite"
		_search_condition="pcislot_name=\"${_pcislot_name}\""
		[ -n "${_pcislot_desc}" ] && _search_condition="${_search_condition} AND pcislot_desc=\"${_pcislot_desc}\""
		_tmp_qemu_pci_index=$( cbsdsqlro ${_mydb} SELECT pcislot_bus FROM pcibus WHERE ${_search_condition} LIMIT 1 | ${AWK_CMD} '{printf $1}' )
		if [ -n "${_tmp_qemu_pci_index}" ]; then
			# update modified
			cbsdsqlrw ${_mydb} "UPDATE pcibus SET modified=true WHERE ${_search_condition}"

			qemu_pci_index=${_tmp_qemu_pci_index}
			return 0
		fi
	fi
	# end of lookup database stored first

	[ ${_start_bus_id} -gt ${_end_bus_id} ] && ${ECHO} "${N1_COLOR}next_pci_id: invalid range${N0_COLOR}" && return 1
	[ -z "${qemu_pci_index}" ] && qemu_pci_index="0"

	qemu_pci_index=0

	for qemu_pci_index in $( ${SEQ_CMD} ${_start_bus_id} ${_end_bus_id} ); do
		_res=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT idx FROM pcibus WHERE pcislot_bus=${qemu_pci_index} LIMIT 1 2>/dev/null )
		[ -n "${_res}" ] && continue		# probably already used by another devices

		if ! is_qemu_pci_id_busy ${qemu_pci_index}; then
			# found
			return 0
		fi
	done

	${ECHO} "${N1_COLOR}No free available qemu_pci_index in ${_start_bus_id} ${_end_bus_id} range${N0_COLOR}"
	return 1
}

get_pcislot_args()
{
	local _i
	local _pcislot_bus
	local _pcislot_pcislot
	local _pcislot_function
	local _bhyve_pci_index
	local _pcislot_args

	_pcislot_pcislot=0      # optional, 0 to 255. if not specified, the bus value defaults to 0
	_pcislot_function=0     # optional, 0 to 7. if not specified, the function value defaults to 0

	while getopts "a:b:c:i:" opt; do
		case "${opt}" in
			a) _pcislot_bus="${OPTARG}" ;;
			b) _pcislot_pcislot="${OPTARG}" ;;
			c) _pcislot_function="${OPTARG}" ;;
			i) _qemu_pci_index="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_qemu_pci_index}" ] && err 1 "get_pcislot_args: empty _qemu_pci_index"
	add_qemu_pci_id_busy ${_qemu_pci_index}

	_pcislot_bus="${_qemu_pci_index}"      # 0 to 31

	# always set pcislot
	_pcislot_args="${_pcislot_bus}"

	# skip defaults for bus and func
	for _i in ${_pcislot_pcislot} ${_pcislot_function}; do
		[ ${_i} -eq 0 ] && continue
		_pcislot_args="${_pcislot_args}:${_i}"
	done

	printf "${_pcislot_args}"
}

init_qemu_usage()
{
	echo
	${ECHO} "${N1_COLOR}no such qemu-system-x86_64, please install qemu and re-run: cbsd initenv${N0_COLOR}"
	${ECHO} "${N1_COLOR}Please follow ${H3_COLOR}https://github.com/cbsd/cbsd/blob/develop/share/docs/qemu/cbsd_qemu_quickstart.md${N1_COLOR} instruction to setup ${platform} host.${N0_COLOR}"
	case "${platform}" in
		DragonFly)
			${ECHO} "${N1_COLOR}Additional link: ${H3_COLOR}https://www.dragonflybsd.org/docs/docs/howtos/nvmm/${N0_COLOR}"
			_required_kmods="if_tap if_bridge"
			;;
	esac
	echo
}

# test environment for qemuing
# init tmuxcmd
init_qemu()
{
	local _host_ready=1
	local _i _res
	local _required_kmods

	[ "${skip_qemu_check_env}" = "1" ] && return 0		# all fine!

	if is_qemu_domain; then
		_host_ready=1
	else
		init_qemu_usage
		exit 1
	fi

	case "${platform}" in
		FreeBSD)
			if [ ${freebsdhostversion} -lt 1201499 ]; then
				_required_kmods="if_tap if_bridge"
			else
				_required_kmods="if_bridge"
			fi
			;;
		DragonFly)
			_required_kmods="if_tap if_bridge"
			;;
	esac

	for _i in ${_required_kmods}; do
		if ! ${KLDSTAT_CMD} -qm ${_i} >/dev/null 2>&1; then
			${ECHO} "${N1_COLOR}No kldloaded module: ${N2_COLOR}${_i}${N0_COLOR}"
			case "${platform}" in
				FreeBSD)
					${ECHO} "${N1_COLOR}Put ${N2_COLOR}kld_list=\"if_tap if_bridge\"${N1_COLOR} into your ${N2_COLOR}/etc/rc.conf${N1_COLOR} and execute: ${N2_COLOR}service kld restart${N0_COLOR}"
					;;
				DragonFly)
					${ECHO} "${N1_COLOR}Put:${N2_COLOR}\n\nif_tap_load=\"YES\"\nif_bridge_load=\"YES\"\n\n${N1_COLOR} into your ${N2_COLOR}/boot/loader.conf${N1_COLOR} and reboot host.${N0_COLOR}"
					;;
				esac
			_host_ready=0
		fi
	done

	if [ ${_host_ready} -ne 1 ]; then
		init_qemu_usage
		exit 1
	fi

	tmuxcmd=$( which tmux )
	[ -z "${tmuxcmd}" ] && err 1 "${N1_COLOR}Current version required for ${N2_COLOR}tmux${N1_COLOR}\nPlease ${N2_COLOR}pkg install tmux ${N1_COLOR} or ${N2_COLOR}make -C /usr/ports/sysutils/tmux install${N1_COLOR} it.${N0_COLOR}"

#	lockedmemory=$( ${ULIMIT_CMD} -l | ${AWK_CMD} '{printf $1}' )
#	if [ "${lockedmemory}" != "unlimited" ]; then
#		# https://lists.freebsd.org/pipermail/freebsd-qemu/2015-May/002391.html
#		${ECHO} "${N1_COLOR}Qemu requires for enlarged locked memory, see: ${N2_COLOR}ulimits -l${N0_COLOR}"
#		${ECHO} "${N1_COLOR}Please set: ${N2_COLOR}memorylocked=unlimited${N1_COLOR} via ${N2_COLOR}/etc/login.conf${N1_COLOR} in default class, re-run:${N0_COLOR}"
#		${ECHO} "${N2_COLOR}cap_mkdb /etc/login.conf${N0_COLOR}"
#		err 1 "${N1_COLOR}and re-login${N0_COLOR}"
#	fi
}

# export arguments for qemu cd dsk vms in $cd_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_cd_args; then
# 	echo $cd_args
# else
#	echo "No disks"
# fi
compile_cd_args()
{
	local cd_id=0
	local sqldelimer=" "
	local _pcislot_args=
	local _ext
	local _device T F

	eval $( cbsdsqlro storage_media SELECT idx,path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" | while read idx path; do

		# check for .fs$ extension: use ahci-hd for this (e.g OpenBSD image)
		_ext=${path##*.}

		# OpenBSD UEFI
		if [ "${_ext}" = "img" ]; then
			_device="ahci-hd"
		else
			_device="ahci-cd"
		fi

#		if ! next_pci_id -n cdrom -d ${path}; then
#			# no free pci bus
#			exit 0
#		fi

		# -drive file=IMAGE.iso,media=cdrom
#		echo "export cd${cd_id}=\"-drive file=${path},index=${qemu_pci_index},media=cdrom,readonly=on,format=raw\" ;"
		echo "export cd${cd_id}=\"-drive file=${path},media=cdrom,readonly=on,format=raw\" ;"

		# export cdX_path
		echo "export cd${cd_id}_path=\"${path}\";"

		cd_id=$(( cd_id + 1 ))
	done ) || err 1 "${N1_COLOR}Error while create cd map${N0_COLOR}"

	cd_args=
	for i in $( ${SEQ_CMD} 0 31 ); do
		eval T="\$cd$i"
		[ -z "${T}" ] && break
		F=
		eval F="\$cd${i}_path"
		if [ -n "${F}" ]; then
			if [ -z "${mydsk}" ]; then
				mycd="${F}"
			else
				mycd="${mydsk} ${F}"
			fi
		fi
		cd_args="${cd_args} ${T}"
	done

	# Cloud-init support. Looking for seed.iso in sysdir
	if [ -r ${jailsysdir}/${jname}/seed.iso ]; then
		if ! next_pci_id -n cdrom -d ${jailsysdir}/${jname}/seed.iso; then
			# no free pci bus
			exit 0
		fi
		cd_args="${cd_args} -drive file=${jailsysdir}/${jname}/seed.iso,media=cdrom,readonly=on,format=raw"
	fi

# qemu-system-x86_64 -drive format=raw,media=cdrom,readonly,file=debian-8.2.0-amd64-DVD-1.iso 
	[ -z "${cd_args}" ] && return 1
	# export for boot/install/eject mode as cd_args
	#cd_args2=
	#"${cd_args}"
	return 0
}

# export arguments for qemu about dsk vms in $dsk_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_dsk_args; then
# 	echo $dsk_args
# else
#	echo "No disks"
# fi
compile_dsk_args()
{
	local dsk_id=0
	local sqldelimer=" "
	local prefix
	local full_dsk_path
	local QEMUCFG="${1}"
	local dsk_count=0
	local iso_count=0
	local iso_img2=
	local _media_count=0
	local first_count=0
	local _ascii _dev_letter _dev

	local xvd_num=0		# vxd + hd have same counter
	local sd_num=0

	dsk_args=

#	return 0

#	dsk_count=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite 'SELECT COUNT(dsk_path) FROM qemudsk' )

	iso_img2=$( cbsdsqlro storage_media SELECT path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" LIMIT 1 )

	[ -r ${iso_img2} ] && iso_count=$(( iso_count + 1 ))

	if [ -r ${iso_img} ]; then
		if [ "${iso_img}" = "${iso_img2}" ]; then
			iso_img2=
		else
			iso_count=$(( iso_count + 1 ))
		fi
	else
		iso_img=
	fi

	_media_count=$(( iso_count + dsk_count ))

	[ ${_media_count} -eq 0 ] && return 0

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot FROM qemudsk WHERE dsk_type=\"vhd\" | while read dsk_controller dsk_path dsk_slot; do

		# test for full path. If path not started from '/' - append $data dir
		full_dsk_path=
		prefix=$( substr --pos=0 --len=1 --str="${dsk_path}" )

		if [ "${prefix}" != "/" ]; then
			full_dsk_path="${data}/${dsk_path}"
		else
			full_dsk_path="${dsk_path}"
		fi

		if ! next_pci_id -n ${dsk_controller} -d ${full_dsk_path}; then
			# no free pci bus
			exit 0
		fi

		store_qemu_pci_slot -n ${dsk_controller} -d ${full_dsk_path} -a ${qemu_pci_index}

		#echo "export dsk${dsk_id}=\"-s ${_pcislot_args},${dsk_controller},${full_dsk_path}\" ;"
		echo "export dsk${dsk_id}=\"-drive format=raw,file=${full_dsk_path},index=${qemu_pci_index},if=none,id=disk${dsk_id} -device virtio-blk-pci,drive=disk${dsk_id}\" ;"

#  index cannot be used with bus and unit
# index=0
# -drive file=/home/XXX/devboxes/packer/packer_cache/5f955a9967732c158XXXXXXXXXXXXXXXXXXXXXXX.iso,index=0,media=cdrom: drive with bus=0, unit=0 (index=0) exists

#qemu-system-x86_64 -drive format=raw,media=cdrom,readonly,file=debian-8.2.0-amd64-DVD-1.iso 
#-drive file=/usr/jails/vm/freebsd1/dsk1.vhd,if=none,id=disk0   -device virtio-blk-pci,drive=disk0

		# export dskX_path
		echo "export dsk${dsk_id}_path=\"${full_dsk_path}\";"

		echo "xvd_num=${xvd_num}"
		echo "sd_num=${sd_num}"

	done ) || err 1 "${N1_COLOR}Error while create disk map${N0_COLOR}"

	cd_args=
	for i in $( ${SEQ_CMD} 0 31 ); do
		eval T="\$dsk$i"
		[ -z "${T}" ] && break
		F=
		eval F="\$dsk${i}_path"
		if [ -n "${F}" ]; then
			if [ -z "${mydsk}" ]; then
				mydsk="${F}"
			else
				mydsk="${mydsk} ${F}"
			fi
		fi
		dsk_args="${dsk_args} ${T}"
	done


	return 0
}

# print 5c:f9:dd:76:d5:c4 from 5cf9dd76d5c4
normalize_nic_hwaddr()
{
	local _hwaddr
	[ -z "${1}" ] && return 0

	_hwaddr=$( echo "${1}" | ${TR_CMD} -d ":"| ${SED_CMD} -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/' )
	printf ${_hwaddr}
}


# export arguments for qemu about nic vms in $nic_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_nic_args; then
# 	echo $nic_args
# else
#	echo "No nic"
# fi
compile_nic_args()
{
	local _id=0 i _res taplist=
	local sqldelimer=" "
	local mybridge
	local net_emul=
	local _parent_mtu=0
	local _ret=
	local _is_bridge
	local autoconn_iface=$( /usr/local/cbsd/misc/cbsdsysrc -n cbsd_autoconnect_bridge 2>&1 )
	local _pcislot_args= _pref
	local IFS OIFS

	. ${subrdir}/vnet.subr		# for get_vm_uplink_interface

	local errmsg=

	# bstart.conf: clear VM hwaddr in global ARP table
	[ -z "${clean_arp_table_by_vm}" ] && clean_arp_table_by_vm="1"

	nic_args=

	# -device e1000,netdev=net0,host_mtu=1500,mac=00:a0:98:b9:dd:60 -netdev tap,id=net0,ifname=tap1,script=no,downscript=no
	# -device e1000,netdev=net1 
	#nic_args="-device e1000,netdev=net0,host_mtu=1500,mac=00:a0:98:b9:dd:60 -netdev tap,id=net0,ifname=tap1,script=no,downscript=no"
#	nic_args="-net nic,model=e1000 -net tap,id=tap1,script=no"
#	return 0

	#nic_args="-net nic,model=e1000 -net tap,id=tap${tap_id},script=no"

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT id,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr,nic_address,nic_mtu,nic_persistent,nic_ratelimit,nic_flags FROM qemunic WHERE jname=\"${jname}\" | while read nic_id nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr nic_address nic_mtu nic_persistent nic_ratelimit nic_flags; do

		case "${nic_driver}" in
			e1000)
				net_emul="e1000"
				;;
			*)
#				net_emul="virtio-net"
				net_emul="virtio-net-pci"
				;;
			esac

		cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: nic driver: ${nic_driver}, nic_parent: ${nic_parent}, nic_flags [${nic_flags}]

		# when nic_persistent=1 just put it to args
		if [ ${nic_persistent} -eq 1 ]; then
			_pref3=$( substr --pos=0 --len=3 --str=${nic_parent} )
			[ "${_pref3}" != "tap" ] && err 1 "errmsg=\"only tap interface can persistent, not: ${nic_parent}\""
			${IFCONFIG_CMD} ${nic_parent} > /dev/null 2>&1
			[ $? -ne 0 ] && err 1 "errmsg=\"interface ${nic_parent} marked as persistent but not exist\""
			nic_hwaddr="0"
			mytap="${nic_parent}"
			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: ${mytap} marked as persistent
		else	# << if [ ${nic_persistent} -eq 0 ]
			case ${nic_parent} in

				cbsdvale*)
					get_vm_uplink_interface -p ${nic_parent} -u
					;;
				vale*)
					get_vm_uplink_interface -p ${nic_parent} -u
					;;
				*)
					# VPC support
					case "${nic_parent}" in
						vpc-*)
							VPC_ROOT_DIR="${dbdir}/vpc"
							_arg_len=$( strlen ${nic_parent} )
							vpc_name=$( substr --pos=5 --len=${_arg_len} --str="${nic_parent}" )
							_dbpath="${VPC_ROOT_DIR}/${vpc_name}.sqlite"
							[ ! -r ${_dbpath} ] && err 1 "${N1_COLOR}VPC not exist: ${N2_COLOR}${_dbpath}${N0_COLOR}"
							mybridge=
							if ! mybridge=$( get_my_device vpc vpc-${vpc_name} ); then
								err 1 "${N1_COLOR}${CBSD_APP} failed to get VPC bridge: ${mybridge}${N0_COLOR}"
							fi
							${IFCONFIG_CMD} ${mybridge} > /dev/null 2>&1
							_ret=$?
							if [ ${_ret} -ne 0 ]; then
								err 1 "${N1_COLOR}no such VPC bridge interface: ${N2_COLOR}${mybridge}${N0_COLOR}"
							fi
							;;
						*)
							if [ "${nic_parent}" != "0" -o "${nic_parent}" = "auto" ]; then
								_is_bridge=
								if [ "${nic_parent}" != "auto" ]; then
									case "${platform}" in
										Linux)
											_is_bridge=$( ${GREP_CMD} ^DEVTYPE= /sys/class/net/${nic_parent}/uevent | ${CUT_CMD} -d '=' -f 2 )
											;;
										*)
											_is_bridge=$( ${IFCONFIG_CMD} ${nic_parent} | ${AWK_CMD} '/groups:/{print $2}' | ${GREP_CMD} -o bridge )
											;;
									esac
								fi

								if [ "${_is_bridge}" != "bridge" ]; then
									# this is not bridge, detect uplink iface
									cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: ${nic_parent} is not bridge
									get_vm_uplink_interface -p ${nic_parent}
									cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: uplink interface selected: ${interface}

									if [ "${interface}" != "disable" ]; then

										case "${platform}" in
											Linux)
												_is_bridge=$( ${GREP_CMD} ^DEVTYPE= /sys/class/net/${interface}/uevent | ${CUT_CMD} -d '=' -f 2 )
												;;
											*)
												_is_bridge=$( ${IFCONFIG_CMD} ${interface} | ${AWK_CMD} '/groups:/{print $2}' | ${GREP_CMD} -o bridge )
												;;
										esac

										# always up parent device
										case "${platform}" in
											Linux)
												[ "${interface}" != "auto" ] && ${IP_CMD} link set ${interface} up
												;;
											*)
												[ "${interface}" != "auto" ] && ${IFCONFIG_CMD} ${interface} up
												;;
										esac
										cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: try to get bridge for interface: ${interface}

										if [ "${_is_bridge}" = "bridge" ]; then
											mybridge="${interface}"
										else
											if ! mybridge=$( get_my_device bridge ${interface} ); then
												err 1 "errmsg=\"Error:get_my_device_bridge_for_${interface}: ${mybridge}\""
											fi
										fi
										cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: bridge interface selected: ${mybridge}
									else
										# don't create/attach to bridge
										mybridge="disable"
									fi
								else
									case "${platform}" in
										Linux)
											${IP_CMD} link show ${nic_parent} > /dev/null 2>&1
											_ret=$?
											;;
										*)
											${IFCONFIG_CMD} ${nic_parent} > /dev/null 2>&1
											_ret=$?
											;;
									esac
									[ ${_ret} -ne 0 ] && err 1 "errmsg=\"Error:no_such_bridge: ${nic_parent}. Please create it\""
									mybridge="${nic_parent}"
								fi
							else
								# don't create/attach to bridge
								mybridge="disable"
							fi
							;;
					esac
					mytap=$( get_my_tap ${mybridge} )
					_ret=$?
					[ ${_ret} -eq 1 ] && err 1 "errmsg=\"Error:get_my_tap_for_${mybridge}: ${mybridge}\""

					# MTU management, should be before addm
					[ -z "${nic_mtu}" ] && nic_mtu=0	# AUTO
					_parent_mtu=0
					if [ ${nic_mtu} -eq 0 -a "${mybridge}" != "disable" ]; then
						# Get parent MTU size
						case "${platform}" in
							Linux)
								_parent_mtu=$( ${CAT_CMD} /sys/class/net/${mybridge}/mtu 2>/dev/null )
								_ret=$?
								;;
							*)
								_parent_mtu=$( ${toolsdir}/nic_info --nic=${mybridge} --mtu --quiet 2>/dev/null )
								_ret=$?
						esac
						cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: mtu set to auto, parent ${mybridge} MTU: ${_parent_mtu}

						if [ ${_ret} -eq 0 ]; then
							if [ -n "${_parent_mtu}" ]; then
								case "${platform}" in
									Linux)
										_ret=$( ${IP_CMD} link set dev ${mytap} mtu ${_parent_mtu} )
										;;
									*)
										# always ifconfig: ioctl SIOCSIFMTU (set mtu): Operation not supported
										# when MTU is same?
										_ret=$( ${IFCONFIG_CMD} ${mytap} mtu ${_parent_mtu} > /dev/null 2>&1 )
										;;
								esac
							fi
						fi
					else
						# Get parent MTU size
						# compare MTU with parent
						#_parent_mtu=$( ${toolsdir}/nic_info --nic=${mybridge} --mtu --quiet 2>/dev/null )
						#_ret=$?
						#if [ ${_ret} -eq 0 ]; then
						#	[ ${nic_mtu} -gt ${_parent_mtu} ]
						#fi
						[ "${nic_mtu}" = "0" ] && nic_mtu="1500"		# case when mybridge = "disable"
						case "${platform}" in
							Linux)
								_ret=$( ${IP_CMD} link set dev ${mytap} mtu ${nic_mtu} )
								;;
							*)
								# always ifconfig: ioctl SIOCSIFMTU (set mtu): Operation not supported
								# when MTU is same?
								_ret=$( ${IFCONFIG_CMD} ${mytap} mtu ${nic_mtu} > /dev/null 2>&1 )
								;;
						esac
						cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: MTU fixed: ${nic_mtu}
					fi

					case "${platform}" in
						Linux)
							echo "${jname}-nic${_id}" > ${workdir}/tmp/nic-${mytap}.desc
							${IP_CMD} link set ${mytap} up
							;;
						*)
							${IFCONFIG_CMD} ${mytap} description "${jname}-nic${_id}" group vm-port up
							;;
					esac

					if [ "${mybridge}" != "disable" ]; then
						if [ "${autoconn_iface}" = "NO" ]; then
							case "${platform}" in
								Linux)
									${BRCTL_CMD} addif ${mybridge} ${mytap} >/dev/null 2>&1
									;;
								*)
									${IFCONFIG_CMD} ${mybridge} addm ${mytap} >/dev/null 2>&1
									;;
							esac
							# export in mytap_X_bridge= as bridge members
							echo "export mytap_${mytap}_bridge=\"${mybridge}\";"
						else
							case "${platform}" in
								Linux)
									#${BRCTL_CMD} addif ${mybridge} ${interface} >/dev/null 2>&1
									${BRCTL_CMD} addif ${mybridge} ${mytap} >/dev/null 2>&1
									#${IP_CMD} link set ${interface} master ${mybridge}  > /dev/null 2>&1
									;;
								*)
									${IFCONFIG_CMD} ${mybridge} addm ${interface} addm ${mytap} >/dev/null 2>&1
									;;
							esac
							# export in mytap_X_bridge= as bridge members
							echo "export mytap_${mytap}_bridge=\"${mybridge}\";"
						fi

						if [ "${nic_flags}" != "0" ]; then
							OIFS="${IFS}"
							IFS=","
							for i in ${nic_flags}; do
								IFS="${OIFS}"
								case "${i}" in
									private)
										${IFCONFIG_CMD} ${mybridge} private ${mytap}
										;;
								esac
								IFS=","
							done
							IFS="${OIFS}"
						fi
					fi

					if [ -n "${nic_address}" ]; then
						OIFS="${OIFS}"
						if [ "${nic_address}" != "0" -o "${nic_address}" != "disable" ]; then
							IFS=","
							for ip in ${nic_address}; do
								if [ "${ip}" = "DHCP" ]; then
									ip=$( dhcpd )
									[ $? -eq 2 ] && err 1 "${N1_COLOR}No free IP address for DHCP in nodeippool${N0_COLOR}"
								fi
								IFS="${OIFS}"
								ipwmask ${ip}
								iptype ${IWM}
								local _inet=$?
								case "${_inet}" in
									1)
										local proto="inet"
										;;
									2)
										local proto="inet6"
										;;
									*)
										continue
										;;
								esac
								# ipv type + mask
								case "${platform}" in
									Linux)
										${IP_CMD} addr add ${ip} dev ${mytap}
										;;
									*)
										${IFCONFIG_CMD} ${mytap} ${proto} ${ip} alias
										;;
								esac
							IFS=","
						done
						IFS="${OIFS}"
						fi
					fi
					;;
			esac
		fi	# << if [ ${nic_persistent} -eq 0 ]
		# MAC MGMT
		if [ "${nic_hwaddr}" = "0" ]; then
			nic_hwaddr=$( mac_gen 00:a0:98 )
			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: MAC address randomized and updated for nic id ${nic_id}: ${nic_hwaddr}
			cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE qemunic SET nic_hwaddr=\"${nic_hwaddr}\" WHERE id=\"${nic_id}\""
		fi

		if [ "${clean_arp_table_by_vm}" = "1" ]; then
			${ARP_CMD} -an | ${AWK_CMD} -v pattern=" ${nic_hwaddr} " '$0 ~ pattern { print $2 }' | ${SORT_CMD} | ${TR_CMD} -d '()' | while read _ip; do
				cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: clean_arp_table_by_vm set to 1: prune ${nic_hwaddr} for ${_ip} in ARP table
				${ARP_CMD} -n -d ${_ip} > /dev/null 2>&1 || true
				#V6
			done
		fi

		# todo: name as descr? or mac as desc?
		if ! next_pci_id -n ${net_emul} -d ${nic_id}; then
			# no free pci bus
			exit 0
		fi

		_pcislot_args=$( get_pcislot_args -i ${qemu_pci_index} )

		#-device virtio-net,netdev=net0 -netdev tap,id=net0,ifname=tap100,script=no,downscript=no \
		myargs=""

		# pcie root device test
#		myargs="-device pcie-root-port,bus=pcie.0,id=pcie.2,port=6,chassis=6 -device ${net_emul},netdev=net${_id},bus=pcie.2,addr=02.0"

		myargs="-device ${net_emul},netdev=net${_id},addr=0x5"

		# append -device for mtu
		# virtio-net support for MTU after r359704
		if [ ${freebsdhostversion} -gt 1300095 ]; then
			# manage MTU on qemu tap/virtio side
			[ ${nic_mtu} -eq 0 -a ${_parent_mtu} -ne 0 ] && nic_mtu="${_parent_mtu}"		# adjust nic_mtu by parent value

			case "${nic_mtu}" in
				0)
					;;
				*)
					# virtio-net support for MTU after r359704
					myargs="${myargs},host_mtu=${nic_mtu}"
					;;
			esac
		fi

		# append -device for mac
		if [ "${nic_hwaddr}" != "0" ]; then
			unset mymac
			mymac=$( normalize_nic_hwaddr ${nic_hwaddr} )
			myargs="${myargs},mac=${mymac}"
		fi
#		if [ "${qemu_have_net_ratelimit}" = "1" ]; then
#			if [ "${nic_ratelimit}" != "0" ]; then
#				myargs="${myargs},ratelimit=${nic_ratelimit}"
#			fi
#		fi
#		if [ "${nic_hwaddr}" != "0" ]; then
#			unset mymac
#			mymac=$( normalize_nic_hwaddr ${nic_hwaddr} )
#			echo "export nic${_id}=\"-s ${_pcislot_args},${net_emul},${mytap},mac=${mymac}\" ;"
#		else
#			echo "export nic${_id}=\"-s ${_pcislot_args},${net_emul},${mytap}\" ;"
#		fi

		# append ifname/netdev part
		myargs="${myargs} -netdev tap,id=net${_id},ifname=${mytap},script=no,downscript=no"

		echo "export nic${_id}=\"${myargs}\" ;"

		# todo: name as descr? or mac as desc?
		store_qemu_pci_slot -n ${net_emul} -d ${nic_id} -a ${qemu_pci_index}
		echo "export mytap${_id}=\"${mytap}\";"

		_id=$(( _id + 1 ))
	done ) || err 1 "${N1_COLOR}Error while creating nic map: ${errmsg}${N0_COLOR}"

	[ -n "${errmsg}" ] && err 1 "${N1_COLOR}Error while creating nic map: ${N2_COLOR}${errmsg}${N0_COLOR}"

	nic_args=

	# export in mytap fill list of vm NICs
	mytap=

	for i in $( ${SEQ_CMD} 0 31 ); do
		eval T="\$nic$i"
		eval taplist="\$mytap$i"
		[ -z "${T}" ] && break
		[ -z "${taplist}" ] && break
		nic_args="${nic_args} ${T}"
		if [ -z "${mytap}" ]; then
			mytap="${taplist}"
		else
			mytap="${mytap} ${taplist}"
		fi
	done

	# clean_arp extra loop by known IP
#	if [ "${clean_arp_table_by_vm}" = "1" ]; then
#		${ARP_CMD} -an | ${AWK_CMD} -v pattern=" ${nic_hwaddr} " '$0 ~ pattern { print $2 }' | ${SORT_CMD} | ${TR_CMD} -d '()' | while read _ip; do
#			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: clean_arp_table_by_vm set to 1: prune ${nic_hwaddr} for ${_ip} in ARP table
#			${ARP_CMD} -n -d ${_ip} > /dev/null 2>&1 || true
#			#V6
#		done
#	fi

	[ -z "${nic_args}" ] && return 1

	return 0
}

# detach and remove disk image from qemu VMs
# jname must be set
# $1 dsk_path from sql table (eg: dsk1.vhd )
# require: /usr/local/bin/cbsd as shell
qemu_remove_dsk()
{
	local dsk="${1}"; shift
	[ -z "${jname}" -o -z "${dsk}" ] && return 0

	[ -r ${jailsysdir}/${jname}/local.sqlite ] && cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM qemudsk WHERE dsk_path=\"${dsk}\" AND jname=\"${jname}\"

	if [ "${zfsfeat}" = "1" ]; then
		readconf zfs.conf
		. ${subrdir}/zfs.subr

		if is_getzvol ${data}/${dsk}; then
			${ZFS_CMD} destroy ${is_zvol}
	fi

	elif [ "${hammerfeat}" = "1" ]; then
		err 1 "Hammer not supported yet"
	else
		true
		#date
	fi

	[ -f "${data}/${dsk}" -o -h "${data}/${dsk}" ] && ${RM_CMD} -f "${data}/${dsk}"

	return 0
}

# detach and remove NIC from qemu VMs
# jname must be set
# $1 is id of nic in SQL table
# require: /usr/local/bin/cbsd as shell
qemu_remove_nic()
{
	local id="${1}"; shift
	[ -z "${jname}" -o -z "${id}" ] && return 0

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM qemunic WHERE id=\"${id}\" AND jname=\"${jname}\"

	return 0
}

compile_kernel_args()
{
	kernel_args=

	[ -z "${kernel}" ] && return 0
	[ "${kernel}" = "0" ] && return 0

	if [ ! -r "${kernel}" ]; then
		err 1 "Unable to find the boot kernel (e.g. u-boot-qemu-XXXX package: u-boot-qemu-riscv64/u-boot-qemu-arm64/..): ${kernel}"
	fi

	kernel_args="-kernel ${kernel}"
	return 0
}

compile_bios_args()
{
	local _res=
	local _system_path="/usr/local/share/qemu /usr/share/qemu ${workdir}/share/qemu"

	bios_args=

	[ -z "${bios}" ] && return 0
	[ "${bios}" = "0" ] && return 0

	_res=$( substr --pos=0 --len=1 --str="${bios}" )

	if [ "${_res}" != "/" ]; then
		for i in ${_system_path}; do
			if [ -r "${i}/${bios}" ]; then
				bios_args="-bios ${i}/${bios}"
				return 0
			fi
		done
		err 1 "Unable to find the BIOS (e.g. opensbi package): ${bios} (search path: ${_system_path})"
	fi

	if [ ! -r "${bios}" ]; then
		err 1 "Unable to find the BIOS (e.g. opensbi package): ${bios}"
	fi

	bios_args="-bios ${bios}"
	return 0
}

compile_cpu_args()
{
	cpu_args=

	[ -z "${cpu}" ] && return 0
	[ "${cpu}" = "0" ] && return 0

	# todo: auto
	if [ "${cpu}" = "auto" ]; then

		# !! check for native arch before auto
		case "${vm_arch}" in
			aarch64)
				cpu_args="-cpu cortex-a57"
				;;
			*)
				true
				;;
		esac

	else
		cpu_args="-cpu ${cpu}"
	fi
	return 0
}

# todo: 'auto' by -vga help
compile_vga_args()
{
	vga_args=

	[ -z "${vga}" ] && return 0

	if [ "${nographic}" = "1" ]; then
		vga_args="-nographic"
		return 0
	fi
	if [ "${vga}" = "0" ]; then
		vga_args="-nographic"
		return 0
	fi

	# todo: auto/qxl..
	if [ "${vga}" = "auto" ]; then
		vga_args="-vga std"
	else
		vga_args="-vga ${vga}"
	fi

	return 0
}

compile_machine_args()
{
	local _ret _accel=0 _accel_auto

	machine_args=

	[ -z "${machine}" ] && err 1 "${CBSD_APP}: compile_machine_args: no such machine settings${N0_COLOR}"

	# RISC64: qemu -machine help
	#Supported machines are:
	#none                 empty machine
	#sifive_e             RISC-V Board compatible with SiFive E SDK
	#sifive_u             RISC-V Board compatible with SiFive U SDK
	#spike                RISC-V Spike Board (default)
	#spike_v1.10          RISC-V Spike Board (Privileged ISA v1.10)
	#spike_v1.9.1         RISC-V Spike Board (Privileged ISA v1.9.1)
	#virt                 RISC-V VirtIO board

	#machine_args="-machine spike"
	#machine_args="-machine virt"
	# riscv need for sysutils/opensbi for bios options
	# riscv need for sysutils/u-boot-qemu-riscv64 for -kernel options

	machine_args="-machine type=${machine}"

	_accel_auto=

	if [ "${machine_accel}" = "auto" ]; then

		case "${platform}" in
			Linux)
				# check for kvm
				if [ -r /usr/bin/kvm ]; then
					[ ${quiet} -ne 1 ] && ${ECHO} "${N1_COLOR}machine_accel auto: ${N2_COLOR}KVM found!${N0_COLOR}"
					_accel_auto="kvm"
					_accel=1
				else
					${CAT_CMD} /sys/kernel/btf/kvm > /dev/null 2>&1
					if [ $? -eq 0 ]; then
						[ ${quiet} -ne 1 ] && ${ECHO} "${N1_COLOR}machine_accel auto: ${N2_COLOR}KVM found!${N0_COLOR}"
						_accel_auto="kvm"
						_accel=1
					else
						${ECHO} "${W1_COLOR}Warning${N1_COLOR}: accel module not found: ${N2_COLOR}/usr/bin/kvm${N1_COLOR}. It will work slowly${N0_COLOR}"
						_accel=0
					fi
				fi
				;;
			*)
				# check for nvmm
				if [ -z "${NVMMCTL_CMD}" ]; then
					_accel=0
					${ECHO} "${W1_COLOR}Warning${N1_COLOR}: accel module not found: ${N2_COLOR}nvmm${N1_COLOR}. It will work slowly${N0_COLOR}"
				elif [ ! -x "${NVMMCTL_CMD}" ]; then
					_accel=0
					${ECHO} "${W1_COLOR}Warning${N1_COLOR}: accel module not found: not executable: ${N2_COLOR}${NVMMCTL_CMD}${N1_COLOR}. It will work slowly${N0_COLOR}"
				elif [ -x "${NVMMCTL_CMD}" ]; then
					[ ${quiet} -ne 1 ] && ${ECHO} "${N1_COLOR}machine_accel auto: ${N2_COLOR}${NVMMCTL_CMD} found!${N0_COLOR}"
					${NVMMCTL_CMD} identify
					_ret=$?
					if [ ${_ret} -ne 0 ]; then
						readconf nvmm.conf
						if [ "${nvmm_module_auto_load}" = "1" ]; then
							${ECHO} "${W1_COLOR}Warning${N1_COLOR}: identify failed: ${N2_COLOR}${NVMMCTL_CMD} identify${N1_COLOR}${N0_COLOR}"
							${ECHO} "${N2_COLOR}nvmm_module_auto_load${N1_COLOR} options is enabled via nvmm.conf, trying to load the module automatically via: ${N2_COLOR}kldload nvmm...${N0_COLOR}"
							sync
							sleep 1
							${KLDLOAD_CMD} nvmm
							_ret=$?
							if [ ${_ret} -ne 1 ]; then
								${ECHO} "${N1_COLOR}done, re-check..${N0_COLOR}"
								${NVMMCTL_CMD} identify
								_ret=$?
								if [ ${_ret} -ne 0 ]; then
									${ECHO} "${W1_COLOR}Warning${N1_COLOR}: identify failed: ${N2_COLOR}${NVMMCTL_CMD} identify${N1_COLOR}. Acceleration disabled. It will work slowly${N0_COLOR}"
									_accel=0
								else
									${ECHO} "${N1_COLOR}machine_accel auto: ${N2_COLOR}${NVMMCTL_CMD} found!${N0_COLOR}"
									_accel=1
									_accel_auto="nvmm"
								fi
							else
								echo "failed"
								_accel=0
							fi
						else
							${ECHO} "${N2_COLOR}nvmm_module_auto_load${N1_COLOR} options is disabled via nvmm.conf${N0_COLOR}"
							${ECHO} "${W1_COLOR}Warning${N1_COLOR}: identify failed: ${N2_COLOR}${NVMMCTL_CMD} identify${N0_COLOR}"
							${ECHO} "${W1_COLOR}Warning${N1_COLOR}: is nvmm module loaded?: ${N2_COLOR}kldload nvmm${N0_COLOR}"
							${ECHO} "${W1_COLOR}Warning${N1_COLOR}: If nvmm module exist, please add to /boot/loader.conf: ${N2_COLOR}nvmm_load=YES${N0_COLOR}"
							${ECHO} "${W1_COLOR}Warning${N1_COLOR}: Acceleration disabled. It will work slowly${N0_COLOR}"
							_accel=0
						fi
					else
						_accel=1
						_accel_auto="nvmm"
				fi
				else
					${ECHO} "${W1_COLOR}Warning${N1_COLOR}: accel module not found: ${N2_COLOR}nvmm${N1_COLOR}. It will work slowly${N0_COLOR}"
				fi
		esac

		[ -z "${_accel_auto}" ] && _accel_auto="${machine_accel}"

		if [ ${_accel} -eq 1 ]; then
			machine_args="${machine_args},accel=${_accel_auto}"
		fi
	else
		if [ -n "${machine_accel}" -a "${machine_accel}" != "0" ]; then
			machine_args="${machine_args},accel=${machine_accel}"
		fi
	fi

	return 0
}


compile_vnc_args()
{
	local vm_port=
	local vnc_bind=
	local _jip= _ret=
	local width= height=
	local _pcislot_args=
	local _vnc_bind=127.0.0.1
	local _skip_ports= i= _vms= _tmpport=

	vnc_args=

	# spice by default?
	[ ${spice_default} -eq 1 ] && return 1

	case "${vm_vnc_port}" in
		0)
			case "${qemu_vnc_tcp_bind}" in
				0.0.0.0)
					_vnc_bind="127.0.0.1"
					;;
				::|\[::\])
					_vnc_bind="::1"
					;;
				*)
					_vnc_bind="${qemu_vnc_tcp_bind}"
					;;
			esac
			# build skip list
			_vms=$( ${miscdir}/sqlcli ${dbdir}/local.sqlite "SELECT jname FROM jails WHERE emulator = 'qemu'" )
			for i in ${_vms}; do
				[ "${i}" = "${jname}" ] && continue		# its me
				[ ! -r ${jailsysdir}/${i}/local.sqlite ] && continue
				_tmpport=$( cbsdsqlro ${jailsysdir}/${i}/local.sqlite "SELECT vnc_port FROM settings LIMIT 1" )
				if [ -n "${_tmpport}" ]; then
					if ! is_number ${_tmpport}; then
						[ ${_tmpport} -eq 0 ] && continue
						if [ -z "${_skip_ports}" ]; then
							_skip_ports="${_tmpport}"
						else
							_skip_ports="${_skip_ports} ${_tmpport}"
						fi
					else
						continue
					fi
				fi
			done

			vm_port=$( get-next-tcp-port address=${_vnc_bind} start_port=5900 end_port=6900 skip=\"${_skip_ports}\" )
			[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 5900-6900 range for ${_vnc_bind}${N0_COLOR}"
			cbsdlogger NOTICE ${CBSD_APP}: auto-detected free VNC port [skip for: ${_skip_ports}]: ${vm_port} for ${_vnc_bind}
			;;
		1)
			# disabled
			return 0
			;;
		*)
			vm_port="${vm_vnc_port}"
			;;
	esac

	# update vnc_port in SQL and duplicate it in the ascii file
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE settings SET vnc_port='${vm_port}'"
	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${qemu_vnc_tcp_bind}" ]; then
		vnc_bind="${qemu_vnc_tcp_bind}"
	else
		vnc_bind="${default_vnc_tcp_bind}"
	fi

	# jailed?
	_jailed=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT jailed FROM settings LIMIT 1" )
	[ -z "${_jailed}" ] && _jailed="0"

	# this is jailed qemu, try to obtain jail IPs
	if [ "${_jailed}" != "0" ]; then
		_jip=$( jget mode=quiet jname=${_jailed} ip4_addr )
		iptype ${_jip} >/dev/null 2>&1
		_ret=$?
		case ${_ret} in
		1)
			# jail have valid IPv4
			vnc_bind="${_jip}"
			;;
		*)
			# ipv6 or invalid IP
			;;
		esac
	fi

	# add qemu_vnc_tcp_ipconnect variables, used in
	# vncviewer prompt and exported hooks variables
	case "${vnc_bind}" in
		0.0.0.0)
			if [ -n "${nodeip}" ]; then
				qemu_vnc_tcp_ipconnect="${nodeip}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		::|\[::\])
			if [ -n "${nodeip6}" ]; then
				qemu_vnc_tcp_ipconnect="${nodeip6}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip6 variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		*)
			qemu_vnc_tcp_ipconnect="${vnc_bind}"
			;;
	esac

	echo "${qemu_vnc_tcp_ipconnect}" > ${jailsysdir}/${jname}/vnc_bind

	if [ -n "${qemu_vnc_resolution}" ]; then
		width=${qemu_vnc_resolution%%x*}
		height=${qemu_vnc_resolution##*x}
	else
		width="${default_vnc_width}"
		heigh="${default_vnc_height}"
	fi

	#vnc_args="-s ${_pcislot_args},fbuf,tcp=${vnc_bind}:${vm_port},w=${width},h=${height}"
	local _vm_screen=$(( vm_port - 5900 ))
	vnc_args="-vnc ${vnc_bind}:${_vm_screen}"

	if [ "${vnc_password}" = "0" -o -z "${vnc_password}" ]; then
		unset vnc_password
	else
		#vnc_args="${vnc_args},password=on"
		# change password via qemu-monitor
		true
	fi

	if [ ${quiet} -ne 1 ]; then
		${ECHO} "${N1_COLOR}VNC is enabled. VNC bind/port: ${N2_COLOR}${qemu_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
		${ECHO} "${N1_COLOR}For attach VM console, use: ${N2_COLOR}vncviewer ${qemu_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
		${ECHO} "${N1_COLOR}Resolution: ${N2_COLOR}${width}x${height}.${N0_COLOR}"
		[ -n "${vnc_password}" ] && ${ECHO} "${N1_COLOR}VNC pass: ${N2_COLOR}${vnc_password}${N0_COLOR}"

		if [ "${vnc_bind}" = "0.0.0.0" ]; then
			echo
			${ECHO} "${N1_COLOR}Warning!!! You are running a system with open ${N2_COLOR}VNC${N1_COLOR} port to the world wich is not secure${N0_COLOR}"
			${ECHO} "${N1_COLOR}Please use IP filter or balancer with password to restrict ${N2_COLOR}VNC${N1_COLOR} port access${N0_COLOR}"
			${ECHO} "${N1_COLOR}Or change vnc_bind params to ${N2_COLOR}127.0.0.1${N1_COLOR} and reboot VM after maintenance work${N0_COLOR}"
			echo
		fi
	fi

	return 0
}

# export vncdisplay
compile_spice_args()
{
	local vm_port
	local vnc_bind

	# spice not by default?
	[ ${spice_default} -eq 0 ] && return 1

	local width height

	vnc_args=

	case "${vm_vnc_port}" in
		0)
			case "${qemu_spice_tcp_bind}" in
				0.0.0.0)
					_spice_bind="127.0.0.1"
					;;
				::|\[::\])
					_spice_bind="::1"
					;;
				*)
					_spice_bind="${qemu_spice_tcp_bind}"
					;;
			esac
			# build skip list
			_vms=$( ${miscdir}/sqlcli ${dbdir}/local.sqlite "SELECT jname FROM jails WHERE emulator = \"qemu\"" )
			for i in ${_vms}; do
				[ "${i}" = "${jname}" ] && continue             # its me
				[ ! -r ${jailsysdir}/${i}/local.sqlite ] && continue
				_tmpport=$( cbsdsqlro ${jailsysdir}/${i}/local.sqlite "SELECT vm_spice_port FROM settings LIMIT 1" )
				if [ -n "${_tmpport}" ]; then
					if ! is_number ${_tmpport}; then
						[ ${_tmpport} -eq 0 ] && continue
						if [ -z "${_skip_ports}" ]; then
							_skip_ports="${_tmpport}"
						else
							_skip_ports="${_skip_ports} ${_tmpport}"
						fi
					else
						continue
					fi
				fi
			done
			vm_port=$( get-next-tcp-port address=${_spice_bind} start_port=6000 end_port=7000 skip=\"${_skip_ports}\" )
			[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 6000-7000 range for ${_spice_bind}${N0_COLOR}"
			cbsdlogger NOTICE ${CBSD_APP}: auto-detected free Spice port [skip for: ${_skip_ports}]: ${vm_port} for ${_spice_bind}
##
			spice_args="--vrde on --vrdeport ${vm_port}"
			${ECHO} "${N1_COLOR}SPICE is enabled. Spice port: ${N2_COLOR}${vm_port}. ${N1_COLOR}Spicy pass: ${N2_COLOR}cbsd${N0_COLOR}${N0_COLOR}"
			;;
		1)
			vncdisplay=0
			vm_port=0
			spice_args="--vrde off"
		;;
	*)
			vm_port=${vm_spice_port}
			spice_args="--vrde on --vrdeport ${vm_port}"
			;;
	esac

	vncdisplay="${vm_port}"

	# update vm_vnc_port in SQL and duplicate it in the ascii file
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE settings SET vm_spice_port=\"${vm_port}\""
	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${qemu_spice_tcp_bind}" ]; then
		spice_bind="${qemu_spice_tcp_bind}"
	else
		spice_bind="${default_spice_tcp_bind}"
	fi

	# add qemu_vnc_tcp_ipconnect variables, used in
	# vncviewer promt and exported hooks variables
	if [ "${spice_bind}" = "0.0.0.0" ]; then
		qemu_spice_tcp_ipconnect="${nodeip}"
	else
		qemu_spice_tcp_ipconnect="${spice_bind}"
	fi

	echo "${qemu_spice_tcp_ipconnect}" > ${jailsysdir}/${jname}/vnc_bind

#	if [ -n "${qemu_vnc_resolution}" ]; then
#		width=${qemu_vnc_resolution%%x*}
#		height=${qemu_vnc_resolution##*x}
#	else
#		width="${default_vnc_width}"
#		heigh="${default_vnc_height}"
#	fi

	${ECHO} "${N1_COLOR}VRDP is enabled. SPICE bind/port: ${N2_COLOR}${qemu_spice_tcp_ipconnect}:${vm_port}${N0_COLOR}"
	${ECHO} "${N1_COLOR}For attach VM console, use: ${N2_COLOR}spicy -h ${qemu_spice_tcp_ipconnect} -p ${vm_port}${N0_COLOR}"
	[ -n "${spice_password}" ] && ${ECHO} "${N1_COLOR}SPICE pass: ${N2_COLOR}${spice_password}${N0_COLOR}"

	case "${spice_bind}" in
		0.0.0.0)
			if [ -n "${nodeip}" ]; then
				qemu_spice_tcp_ipconnect="${nodeip}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		::|\[::\])
			if [ -n "${nodeip6}" ]; then
				qemu_spice_tcp_ipconnect="${nodeip6}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip6 variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		*)
			qemu_spice_tcp_ipconnect="${vnc_bind}"
			;;
	esac

	if [ "${spice_bind}" = "0.0.0.0" ]; then
		echo
		${ECHO} "${N1_COLOR}Warning!!! You are running a system with open ${N2_COLOR}SPICE${N1_COLOR} port to the world wich is not secure${N0_COLOR}"
		${ECHO} "${N1_COLOR}Please use IP filter or balancer with password to restrict ${N2_COLOR}SPICE${N1_COLOR} port access${N0_COLOR}"
		${ECHO} "${N1_COLOR}Or change spice_bind params to ${N2_COLOR}127.0.0.1${N1_COLOR} and reboot VM after maintenance work${N0_COLOR}"
		echo
	fi

	return 0
}



# -j ${jname}
# return 0 when no VM process exist by $jname
# return 1 when VM process exist with $jname + return $vm_pid and $vm_state variables
# e.g: check_for_qemu_process -j vm1
check_for_qemu_process()
{
	local jname b_jname _state _domid _ret _test_pid

	unset vm_pid vm_state

	while getopts "j:" opt; do
		case "${opt}" in
			j) jname="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${jname}" ] && return 0

	if [ -r ${jailsysdir}/${jname}/qemu.pid ]; then
		_test_pid=$( ${CAT_CMD} ${jailsysdir}/${jname}/qemu.pid 2>/dev/null )
		if [ -n "${_test_pid}" ]; then
			${PS_CMD} -p ${_test_pid} > /dev/null 2>&1
			_ret=$?
			if [ ${_ret} -ne 0 ]; then
				return 0
			fi
		else
			return 0
		fi
	else
		return 0
	fi

	# on DFLY, 'qemu-system-x86_64' does not fit into UCOMM column (even with -ww options), unlike FreeBSD.
	# looking for a non-strict match:
	# qemu-system*)
	# instead of
	# qemu-system-x86_64)
	eval $( ${PS_CMD} axopid,state,ucomm,command -ww -p ${_test_pid} | while read pid state ucomm command; do
		case ${ucomm} in
			qemu-system*)
				echo vm_state=\"${state}\"
				echo vm_pid=\"${_test_pid}\"
				break
				;;
			*)
				continue
				;;
		esac
	done )

	[ -z "${vm_pid}" ] && return 0
	return 1
}

# return 0 if current host is QEMU domain
# if is_qemu_domain; then
#   echo "qemu available"
# fi
is_qemu_domain()
{
	local _ret

	[ -z "${QEMU_SYSTEM_X86_64_CMD}" ] && return 1
	[ ! -x "${QEMU_SYSTEM_X86_64_CMD}" ] && return 1
	${QEMU_SYSTEM_X86_64_CMD} --version > /dev/null 2>&1
	_ret=$?

	return ${_ret}
}

###
fi

if [ ! "$_CBSD_BHYVE_SUBR" ]; then
_CBSD_BHYVE_SUBR=1
###

# generic function for bhyve
# required:
# strings.subr
#
. ${subrdir}/virtual.subr

# test environment for bhyveing
init_bhyve()
{
	local _i _res

	[ "${skip_bhyve_check_env}" = "1" ] && return 0			# all fine!

	if [ ${freebsdhostversion} -lt 1201499 ]; then
		local _required_kmods="vmm if_tap if_bridge nmdm"
	else
		local _required_kmods="vmm if_tuntap if_bridge nmdm"
	fi

	if [ "${skip_bhyve_init_warning}" != "1" ]; then

		case "${arch}" in
			amd64|i386)
				_res=$( ${SUDO_CMD} -u cbsd ${miscdir}/popcnttest > /dev/null 2>&1 )

				if [ $? -ne 0 ]; then
					# work-around for Alex (CBSD Telegram) issue: this is not clean check for EPT existance:
					# sometimes errcode = 16 but POPCNT feature present in CPU
					# So, just print warning about this. Need for deep investigation
					${ECHO} "${N1_COLOR}Warning: It seems like your CPU does not support ${N2_COLOR}EPT${N0_COLOR}"
					${ECHO} "${N1_COLOR}But I will try to run bhyve anyway...${N0_COLOR}"
					echo
					${ECHO} "${N1_COLOR}To disable this warning, please set in ${workdir}/etc/bhyve-default-default.conf: ${N2_COLOR}skip_bhyve_init_warning${N1_COLOR} to: ${N2_COLOR}1${N0_COLOR}"
					${ECHO} "${N1_COLOR}Pause for 10 seconds${N0_COLOR}"
					sleep 10
				fi
				;;
			*)
				;;
		esac
	fi

	if [ "${skip_bhyve_init_virtual_warning}" != "1" ]; then
		if [ "${is_virtual}" != "physical" ]; then
			${ECHO} "${N1_COLOR}Warning: Your current environment is not physical. This is a requirement for a working bhyve${N0_COLOR}"
			${ECHO} "${N1_COLOR}Virtual engine detected: ${N2_COLOR}${is_virtual}${N0_COLOR}"
			${ECHO} "${N1_COLOR}Please refer to this page for more information: ${N2_COLOR}https://wiki.freebsd.org/bhyve${N0_COLOR}"
			${ECHO} "${N1_COLOR}Try to run bhyve anyway...${N0_COLOR}"
			${ECHO} "${N1_COLOR}To disable this warning, please set in ${workdir}/etc/bhyve-default-default.conf: ${N2_COLOR}skip_bhyve_init_virtual_warning${N1_COLOR} to: ${N2_COLOR}1${N0_COLOR}"
			${ECHO} "${N1_COLOR}Pause for 10 seconds${N0_COLOR}"
			sleep 10
		fi
	fi

	if [ "${skip_bhyve_init_virtual_warning}" != "1" ]; then
		for _i in ${_required_kmods}; do
			if ! ${KLDSTAT_CMD} -qm ${_i} >/dev/null 2>&1; then
				${ECHO} "${N1_COLOR}No kldloaded module: ${N2_COLOR}${_i}${N0_COLOR}"
				${ECHO} "${N1_COLOR}Please add ${N2_COLOR}vmm_load=\"YES\"${N1_COLOR} to /boot/loader.conf and${N1_COLOR}"
				${ECHO} "${N1_COLOR}put ${N2_COLOR}kld_list=\"${_required_kmods}\"${N1_COLOR} into your ${N2_COLOR}/etc/rc.conf${N1_COLOR} then reboot the host. Or, for example, run:${N0_COLOR}"
				${ECHO} "${N2_COLOR} sysrc kld_list+=\"vmm if_tuntap if_bridge nmdm\" && service kld restart${N0_COLOR}"

				if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
					readconf cbsd_queue.conf
					if [ -z "${cbsd_queue_backend}" ]; then
						MOD_CBSD_QUEUE_DISABLED="1"
					else
						[ -n "${cbsd_bhyve_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_bhyve_queue_name} id=${jname} cmd=bstart status=2 data_status=1
					fi
				fi
				exit 1
			fi
		done
	fi

	TMUX_CMD=$( which tmux )
	[ -z "${TMUX_CMD}" -o ! -x "${TMUX_CMD}" ] && err 1 "${N1_COLOR}The current version requires ${N2_COLOR}tmux${N1_COLOR}\nPlease run ${N2_COLOR}pkg install tmux ${N1_COLOR} or ${N2_COLOR}make -C /usr/ports/sysutils/tmux install${N1_COLOR} it.${N0_COLOR}"
	tmuxcmd="${TMUX_CMD} -Lcbsd-${jname}"
	return 0
}

# return 0 or 1 if $1 bus id exist in global $bhyve_pci_id_busy_list
#  if is_bhyve_pci_id_busy 5; then
#         echo "EXIST"
#  fi
#
# if ! is_bhyve_pci_id_busy 5; then
#        echo "NOT EXIST"
# fi
is_bhyve_pci_id_busy()
{
	local _id="${1}"
	local _i
	local _buf_file="${jailsysdir}/${jname}/bhyve_pciid"

	# use $_buf_file as an intermediate buffer for share
	# and exchange $bhyve_pci_id_busy_list vars
	[ -r ${_buf_file} ] && . ${_buf_file}

	# free
	[ -z "${bhyve_pci_id_busy_list}" ] && return 1

	for _i in ${bhyve_pci_id_busy_list}; do
		[ ${_i} -eq ${_id} ] && return 0		# already exist
	done

	# free
	return 1
}

# add new $1 bus id in $bhyve_pci_id_busy_list array
add_bhyve_pci_id_busy()
{
	local _id="${1}"
	local _buf_file="${jailsysdir}/${jname}/bhyve_pciid"

	if is_bhyve_pci_id_busy ${_id}; then
		# already in list
		return 0
	fi

	bhyve_pci_id_busy_list="${bhyve_pci_id_busy_list} ${_id}"

	# use $_buf_file as an intermediate buffer for share
	# and exchange $bhyve_pci_id_busy_list vars
	/usr/local/cbsd/misc/cbsdsysrc -qf ${_buf_file} bhyve_pci_id_busy_list="${bhyve_pci_id_busy_list}" > /dev/null 2>&1

	return 0
}

# -a _pcislot_bus
# -b _pcislot_pcislot
# -c _pcislot_function
# -n - device name: fbuf,..
# -d - device descr/args, e.g <path_to_device>
store_bhyve_pci_slot()
{
	local _pcislot_bus=0
	local _pcislot_pcislot=0
	local _pcislot_function=0
	local _pcislot_name=
	local _pcislot_desc=
	local _mydb _i _res

	while getopts "a:b:c:d:n:" opt; do
		case "${opt}" in
			a) _pcislot_bus="${OPTARG}" ;;
			b) _pcislot_pcislot="${OPTARG}" ;;
			c) _pcislot_function="${OPTARG}" ;;
			d) _pcislot_desc="${OPTARG}" ;;
			n) _pcislot_name="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	_mydb="${jailsysdir}/${jname}/local.sqlite"

	[ -z "${_pcislot_name}" ] && err 1 "store_bhyve_pci_slot: name is empty"

	for _i in _pcislot_bus _pcislot_pcislot _pcislot_function; do
		eval _res="\${${_i}}"
		if is_number ${_res}; then
			err 1 "store_bhyve_pci_slot: ${_i} is not number: ${_res}"
		fi
	done

	local _search_condition
	local _tmp_bhyve_pci_index=

	# store into temporary pcibus map to determine/avoid bus id collision
	cbsdsqlrw ${_mydb} "INSERT INTO pcibus_run ( pcislot_name,pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc,modified ) VALUES ( \"${_pcislot_name}\", \"${_pcislot_bus}\", \"${_pcislot_pcislot}\", \"${_pcislot_function}\", \"${_pcislot_desc}\", true )"

	_search_condition="pcislot_name=\"${_pcislot_name}\""
	[ -n "${_pcislot_desc}" ] && _search_condition="${_search_condition} AND pcislot_desc=\"${_pcislot_desc}\""
	_tmp_bhyve_pci_index=$( cbsdsqlro ${_mydb} SELECT pcislot_bus FROM pcibus WHERE ${_search_condition} LIMIT 1 | ${AWK_CMD} '{printf $1}' )

	if [ -n "${_tmp_bhyve_pci_index}" ]; then
		# update modified flags
		cbsdsqlrw ${_mydb} "UPDATE pcibus SET modified=true WHERE ${_search_condition}"
		[ "${_tmp_bhyve_pci_index}" = "${_pcislot_bus}" ] && return 0		# record already exist (todo: check for bus/func equal
		# pci slot not equal, update
		cbsdsqlrw ${_mydb} "UPDATE pcibus SET pcislot_bus=\"${_pcislot_bus}\" WHERE ${_search_condition}"
	else
		# store pci bus map
		cbsdsqlrw ${_mydb} "INSERT INTO pcibus ( pcislot_name,pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc,modified ) VALUES ( \"${_pcislot_name}\", \"${_pcislot_bus}\", \"${_pcislot_pcislot}\", \"${_pcislot_function}\", \"${_pcislot_desc}\", true )"
	fi
}

# autoincrement for $bhyve_pci_index variable which symbolizes pci id bus
# -e end bus range range (e.g: -e 31), default: 31
# -o (order): next or prev (default is: next)
# -s start bus range (e.g: -s 4), default: 3
# -n - device name: fbuf,..
# -d - device descr/args, e.g <path_to_device>
# when (-n name) and/or (-d descr) is specified,
# lookup for stored pciid information first to
# get old settings
# 0 - reserved for hostbridge
# 1 - reserved for ReFIND device
# 2 - reserved for boot device
# normal use:
#   if ! next_pci_id; then
#     # no free pci bus
#     exit 0
#   fi
# or:
#   if ! next_pci_id -n fbuf; then
#     # no free pci bus
#     exit 0
#   fi
#
next_pci_id()
{
	local _start_bus_id=4 _end_bus_id=31 _order="next"
	local _pcislot_name=
	local _pcislot_desc=
	local _res

	while getopts "d:e:n:o:s:" opt; do
		case "${opt}" in
			e) _end_bus_id="${OPTARG}" ;;
			o) _order="${OPTARG}" ;;
			s) _start_bus_id="${OPTARG}" ;;
			d) _pcislot_desc="${OPTARG}" ;;
			n) _pcislot_name="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	# lookup database stored first
	if [ -n "${_pcislot_name}" ]; then
		local _mydb
		local _search_condition
		local _tmp_bhyve_pci_index=

		_mydb="${jailsysdir}/${jname}/local.sqlite"
		_search_condition="pcislot_name=\"${_pcislot_name}\""
		[ -n "${_pcislot_desc}" ] && _search_condition="${_search_condition} AND pcislot_desc=\"${_pcislot_desc}\""
		_tmp_bhyve_pci_index=$( cbsdsqlro ${_mydb} SELECT pcislot_bus FROM pcibus WHERE ${_search_condition} LIMIT 1 | ${AWK_CMD} '{printf $1}' )
		if [ -n "${_tmp_bhyve_pci_index}" ]; then
			# update modified
			cbsdsqlrw ${_mydb} "UPDATE pcibus SET modified=true WHERE ${_search_condition}"

			bhyve_pci_index=${_tmp_bhyve_pci_index}
			return 0
		fi
	fi
	# end of lookup database stored first

	[ ${_start_bus_id} -gt ${_end_bus_id} ] && ${ECHO} "${N1_COLOR}next_pci_id: invalid range${N0_COLOR}" && return 1
	[ -z "${bhyve_pci_index}" ] && bhyve_pci_index="0"

	bhyve_pci_index=0

	for bhyve_pci_index in $( ${SEQ_CMD} ${_start_bus_id} ${_end_bus_id} ); do
		_res=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT idx FROM pcibus WHERE pcislot_bus=${bhyve_pci_index} LIMIT 1 2>/dev/null )
		[ -n "${_res}" ] && continue		# probably already used by another devices

		if ! is_bhyve_pci_id_busy ${bhyve_pci_index}; then
			# found
			return 0
		fi
	done

	${ECHO} "${N1_COLOR}No free available bhyve_pci_index in ${_start_bus_id} ${_end_bus_id} range${N0_COLOR}"
	return 1
}

# autoincement for nmdm_index
next_nmdm_id()
{
	local _i
	nmdm_index=0

	for _i in $( ${SEQ_CMD} 0 500 ); do
		${LS_CMD} /dev/nmdm${_i}A* > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			nmdm_index=${_i}
			return 0
		fi
	done

	[ ${_i} -eq 500 ] && return 1
	return 0
}

get_pcislot_args()
{
	local _i
	local _pcislot_bus
	local _pcislot_pcislot
	local _pcislot_function
	local _bhyve_pci_index
	local _pcislot_args

	_pcislot_pcislot=0	# optional, 0 to 255. if not specified, the bus value defaults to 0
	_pcislot_function=0	# optional, 0 to 7. if not specified, the function value defaults to 0

	while getopts "a:b:c:i:" opt; do
		case "${opt}" in
			a) _pcislot_bus="${OPTARG}" ;;
			b) _pcislot_pcislot="${OPTARG}" ;;
			c) _pcislot_function="${OPTARG}" ;;
			i) _bhyve_pci_index="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_bhyve_pci_index}" ] && err 1 "get_pcislot_args: empty _bhyve_pci_index"
	add_bhyve_pci_id_busy ${_bhyve_pci_index}

	_pcislot_bus="${_bhyve_pci_index}"	# 0 to 31

	# always set pcislot
	_pcislot_args="${_pcislot_bus}"

	# skip defaults for bus and func
	for _i in ${_pcislot_pcislot} ${_pcislot_function}; do
		[ ${_i} -eq 0 ] && continue
		_pcislot_args="${_pcislot_args}:${_i}"
	done

	printf "${_pcislot_args}"
}

compile_uefi_boot_args()
{
	local _pcislot_args=

	# inherit cd_boot_firmware if hdd_boot_firmware not set
	[ "${hdd_boot_firmware}" = "0" ] && hdd_boot_firmware="${cd_boot_firmware}"

	#also same string in compile_cd_args cd_args
	case "${vm_boot}" in
		hdd)
			# refind alwas at 1 reserved pci id
			case "${hdd_boot_firmware}" in
				refind)
					bhyve_pci_index=1
					_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
					uefi_boot_args="-s ${_pcislot_args},ahci-cd,/usr/local/cbsd/upgrade/patch/efirefd.fd,ro"
					store_bhyve_pci_slot -n ahci-cd -d /usr/local/cbsd/upgrade/patch/efirefd.fd -a ${bhyve_pci_index}
					;;
			esac
			;;
		cd)
			case "${cd_boot_firmware}" in
				refind)
					# refind always at 1 reserved pci id
					if ! next_pci_id -n ahci-cd -d /usr/local/cbsd/upgrade/patch/efirefd.fd; then
						# no free pci bus
						exit 0
					fi

					bhyve_pci_index=1
					_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
					uefi_boot_args="-s ${_pcislot_args},ahci-cd,/usr/local/cbsd/upgrade/patch/efirefd.fd,ro"
					store_bhyve_pci_slot -n ahci-cd -d /usr/local/cbsd/upgrade/patch/efirefd.fd -a ${bhyve_pci_index}
					;;
				bhyve)
					# populate cd_args2
					# refind alwas at 1 reserved pci id
					if ! next_pci_id -n ahci-cd -d /usr/local/cbsd/upgrade/patch/efirefd.fd; then
						# no free pci bus
						exit 0
					fi

					bhyve_pci_index=1
					_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

					cd_args2="-s ${_pcislot_args},ahci-cd,/usr/local/cbsd/upgrade/patch/efirefd.fd,ro"
					store_bhyve_pci_slot -n ahci-cd -d /usr/local/cbsd/upgrade/patch/efirefd.fd -a ${bhyve_pci_index}
					;;
			esac
			;;
		net)
			# refind always at 1 reserved pci id
			#if ! next_pci_id -n ahci-cd -d /usr/local/cbsd/upgrade/patch/efirefn.fd; then
			#	# no free pci bus
			#	exit 0
			#fi

			bhyve_pci_index=1
			_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

			uefi_boot_args="-s ${_pcislot_args},ahci-cd,/usr/local/cbsd/upgrade/patch/efirefn.fd,ro"
			store_bhyve_pci_slot -n ahci-cd -d /usr/local/cbsd/upgrade/patch/efirefn.fd -a ${bhyve_pci_index}
			;;
	esac
}

# export arguments for bhyve about dsk vms in $dsk_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_dsk_args; then
# 	echo $dsk_args
# else
#	echo "No disks"
# fi
compile_dsk_args()
{
	local dsk_id=0
	local sqldelimer=" "
	local prefix
	local full_dsk_path
	local _shared_devs
	local _pcislot_args= T F

	# reset reserved pcubus 3 (boot)
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "DELETE FROM pcibus WHERE pcislot_bus='3'"

	# temporary workaround for Alex' (CBSD Telegram) issue with no disk (old SQL schema) - don't select dsk_conf
	#	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot,dsk_conf FROM bhyvedsk WHERE jname=\"${jname}\" AND dsk_type=\"vhd\" |while read dsk_controller dsk_path dsk_slot dsk_conf; do
	# select only direct-bus attached
	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot,bootable,dsk_serial FROM bhyvedsk WHERE dsk_type=\"vhd\" AND controller_id='0' | while read dsk_controller dsk_path dsk_slot bootable dsk_serial; do

		dsk_sectorsize=
		dsk_conf=
		rate_limit_conf=

		case "${dsk_controller}" in
			virtio-blk|ahci-hd)
				# direct connect
				;;
			*)
				# via controller
				continue
				;;
		esac

		dsk_conf=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_conf FROM bhyvedsk WHERE dsk_path=\"${dsk_path}\" LIMIT 1 2>/dev/null )
		# back compatible for < CBSD 12.0.12, unset sectorsize=512
		[ "${dsk_conf}" = "sectorsize=512" -o "${dsk_conf}" = "0" ] && dsk_conf=

		dsk_sectorsize=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_sectorsize FROM bhyvedsk WHERE dsk_path=\"${dsk_path}\" LIMIT 1 2>/dev/null )

		if [ -n "${dsk_sectorsize}" ]; then
			if [ -n "${dsk_conf}" ]; then
				dsk_conf="${dsk_conf},sectorsize=${dsk_sectorsize}"
			else
				dsk_conf="sectorsize=${dsk_sectorsize}"
			fi
		fi

#		if [ "${bhyve_have_dsk_ratelimit}" = "1" ]; then
#			dsk_iops_limit=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_iops_limit FROM bhyvedsk WHERE dsk_path=\"${dsk_path}\" LIMIT 1 2>/dev/null )
#			dsk_mbps_limit=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_mbps_limit FROM bhyvedsk WHERE dsk_path=\"${dsk_path}\" LIMIT 1 2>/dev/null )
#			[ -z "${dsk_iops_limit}" ] && dsk_iops_limit=0
#			[ -z "${dsk_mbps_limit}" ] && dsk_mbps_limit=0
#		else
			dsk_iops_limit=0
			dsk_mbps_limit=0
#		fi

		if [ "${dsk_iops_limit}" != "0" ]; then
			if [ -z "${rate_limit_conf}" ]; then
				rate_limit_conf="iops_limit=${dsk_iops_limit}"
			else
				rate_limit_conf="${rate_limit_conf},iops_limit=${dsk_iops_limit}"
			fi
		fi
		if [ "${dsk_mbps_limit}" != "0" ]; then
			if [ -z "${rate_limit_conf}" ]; then
				rate_limit_conf="mbps_limit=${dsk_mbps_limit}"
			else
				rate_limit_conf="${rate_limit_conf},mbps_limit=${dsk_mbps_limit}"
			fi
		fi

		# test for full path. If path not started from '/' - append $data dir
		full_dsk_path=
		prefix=$( substr --pos=0 --len=1 --str="${dsk_path}" )

		if [ "${prefix}" != "/" ]; then
			full_dsk_path="${data}/${dsk_path}"
		else
			full_dsk_path="${dsk_path}"
		fi

		if ! next_pci_id -n ${dsk_controller} -d ${full_dsk_path}; then
			# no free pci bus
			exit 0
		fi

		_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
		store_bhyve_pci_slot -n ${dsk_controller} -d ${full_dsk_path} -a ${bhyve_pci_index}

		if [ "${bootable}" = "1" ]; then
			# use reserved bus id 2 for bootable device, not for store in pcibus
			# just overwrite pcislot_args
			bhyve_pci_index=2
			_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
			echo "export dsk_bootable=\"${dsk_path}\" ;"
		fi

		if [ -n "${rate_limit_conf}" ]; then
			if [ -z "${dsk_conf}" ]; then
				dsk_conf="${rate_limit_conf}"
			else
				dsk_conf="${dsk_conf},${rate_limit_conf}"
			fi
		fi

		# todo: check for RELENG
		if [ ${freebsdhostversion} -gt 1400040 ]; then
			if [ "${dsk_serial}" != "0" ]; then
				if [ -z "${dsk_conf}" ]; then
					dsk_conf="ser=${dsk_serial}"
				else
					dsk_conf="${dsk_conf},ser=${dsk_serial}"
				fi
			fi
		fi

		# Boot index TEST
		#bootorder="bootindex=0005"
#		if [ -n "${dsk_conf}" ]; then
#			echo "export dsk${dsk_id}=\"-s ${_pcislot_args},${dsk_controller},${full_dsk_path},${dsk_conf},${bootorder}\" ;"
#		else
#			echo "export dsk${dsk_id}=\"-s ${_pcislot_args},${dsk_controller},${full_dsk_path},${bootorder}\" ;"
#		fi

		if [ -n "${dsk_conf}" ]; then
			echo "export dsk${dsk_id}=\"-s ${_pcislot_args},${dsk_controller},${full_dsk_path},${dsk_conf}\" ;"
		else
			echo "export dsk${dsk_id}=\"-s ${_pcislot_args},${dsk_controller},${full_dsk_path}\" ;"
		fi

		# export dskX_path
		echo "export dsk${dsk_id}_path=\"${full_dsk_path}\";"

		dsk_id=$(( dsk_id + 1 ))
	done ) || err 1 "${N1_COLOR}Error while create disk map${N0_COLOR}"

	dsk_args=
	mydsk=

	for i in $( ${SEQ_CMD} 0 31 ); do
		T=
		eval T="\$dsk$i"
		[ -z "${T}" ] && break
		F=
		eval F="\$dsk${i}_path"
		if [ -n "${F}" ]; then
			if [ -z "${mydsk}" ]; then
				mydsk="${F}"
			else
				mydsk="${mydsk} ${F}"
			fi
		fi
		## make custom argument for bhyve and add count to bhive_pci_index cause increment in while loop we lose
		#if ! next_pci_id; then
		#	# no free pci bus
		#fi
		#add_bhyve_pci_id_busy ${bhyve_pci_index}
		if [ -z "${dsk_args}" ]; then
			dsk_args="${T}"
		else
			dsk_args="${dsk_args} ${T}"
		fi
	done

	# shared devices
	_shared_devs=$( cbsdsqlro storage_media "SELECT path FROM media WHERE type=\"shared\" AND jname=\"${jname}\"" )

	for i in ${_shared_devs}; do

		if ! next_pci_id -n virtio-blk -d ${i}; then
			# no free pci bus
			exit 0
		fi

		_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

		dsk_args="${dsk_args} -s ${_pcislot_args},virtio-blk,${i}"
		store_bhyve_pci_slot -n virtio-blk -d ${i} -a ${bhyve_pci_index}
	done

	if [ -r ${data}/cbsd.img ]; then
		if ! next_pci_id -n virtio-blk -d cbsd.img; then
			# no free pci bus
			exit 0
		fi

		_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

		dsk_args="${dsk_args} -s ${_pcislot_args},virtio-blk,${data}/cbsd.img"
		store_bhyve_pci_slot -n virtio-blk -d cbsd.img -a ${bhyve_pci_index}
	fi

	[ -z "${dsk_args}" ] && return 1
	return 0
}


# export arguments for bhyve cd dsk vms in $cd_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_cd_args; then
# 	echo $cd_args
# else
#	echo "No disks"
# fi
compile_cd_args()
{
	local cd_id=0
	local sqldelimer=" "
	local _pcislot_args=
	local _ext
	local _device T F
	local _full_list	# prevent for dup ( in storage_media )

	eval $( cbsdsqlro storage_media SELECT idx,path FROM media WHERE jname=\"${jname}\" AND type=\"iso\" | while read idx path; do

		# check for .fs$ extension: use ahci-hd for this (e.g OpenBSD image)
		_ext=${path##*.}

		# OpenBSD UEFI
		if [ "${_ext}" = "img" ]; then
			_device="ahci-hd"
		else
			_device="ahci-cd"
		fi

		# workaround when dubbed appears in the table (additional foolproof)
		_is_set=0
		for i in ${_full_list}; do
			[ "${i}" = "${path}" ] && _is_set=1 && break
		done
		[ ${_is_set} -eq 1 ] && continue
		if [ -z "${_full_list}" ]; then
			_full_list="${path}"
		else
			_full_list="${_full_list} ${path}"
		fi

		if ! next_pci_id -n ${_device} -d ${path}-${idx}; then
			# no free pci bus
			exit 0
		fi

		case "${vm_boot}" in
			cd)
				# use reserved bus id 2 for bootable device, not for store in pcibus
				# just overwrite pcislot_args
				bhyve_pci_index=2
				_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
				echo "export cd${cd_id}=\"-s ${_pcislot_args},${_device},${path},ro\" ;"
				;;
			*)
				# store bus id
				_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
				store_bhyve_pci_slot -n ${_device} -d ${path}-${idx} -a ${bhyve_pci_index}
				echo "export cd${cd_id}=\"-s ${_pcislot_args},${_device},${path},ro\" ;"
				;;
		esac

		# export cdX_path
		echo "export cd${cd_id}_path=\"${path}\";"

		cd_id=$(( cd_id + 1 ))
	done ) || err 1 "${N1_COLOR}Error while create cd map${N0_COLOR}"

	cd_args=
	for i in $( ${SEQ_CMD} 0 31 ); do
		eval T="\$cd$i"
		[ -z "${T}" ] && break
		F=
		eval F="\$cd${i}_path"
		if [ -n "${F}" ]; then
			if [ -z "${mydsk}" ]; then
				mycd="${F}"
			else
				mycd="${mydsk} ${F}"
			fi
		fi
		cd_args="${cd_args} ${T}"
	done

	if [ -n "${ci_template}" ]; then
		case "${ci_template}" in
			fire*)
				# firestarted cloud
				;;
			*)
				# Cloud-init support. Looking for seed.iso in sysdir
				if [ -r ${jailsysdir}/${jname}/seed.iso ]; then
					if ! next_pci_id -n ahci-cd -d seed.iso; then
						# no free pci bus
						exit 0
					fi

					_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

					# cd_args="${cd_args} -s ${_pcislot_args},ahci-cd,${jailsysdir}/${jname}/seed.iso,nocache,direct,ro"	# no cache/direct for direct editing in VM runtime
					cd_args="${cd_args} -s ${_pcislot_args},ahci-cd,${jailsysdir}/${jname}/seed.iso,ro"			# no cache/direct for direct editing in VM runtime
					store_bhyve_pci_slot -n ahci-cd -d seed.iso -a ${bhyve_pci_index}
				fi
				;;
		esac
	fi

	[ -z "${cd_args}" ] && return 1
	# export for boot/install/eject mode as cd_args
	#cd_args2=
	#"${cd_args}"
	return 0
}

# export arguments for bhyve about dsk vms attached to controller_id in $dsk_controller_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_dsk_controller_args; then
# 	echo $dsk_controller_args
# else
#	echo "No disks"
# fi
compile_dsk_controller_args()
{
	local prefix
	local full_dsk_path
	local _pcislot_args=
	local _dsk_contoller_name _dsk_controller_list

	dsk_controller_args=

	local _dsk_path=
	local _i

	_dsk_controller_name_list=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT name FROM bhyve_dskcontroller WHERE name!=\"0\" | ${XARGS_CMD} )

	[ -z "${_dsk_controller_name_list}" ] && return 0

	for _dsk_controller_name in ${_dsk_controller_name_list}; do
		_dsk_controller_type=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT type FROM bhyve_dskcontroller WHERE name=\"${_dsk_controller_name}\" )

		# todo: controller name as desc ? dsk inherit bus id ?
		if ! next_pci_id -n ${_dsk_controller_type}; then
			# no free pci bus
			exit 0
		fi

		_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
		store_bhyve_pci_slot -n ${_dsk_controller_name} -a ${bhyve_pci_index}

		if [ -z "${dsk_controller_args}" ]; then
			dsk_controller_args="-s ${_pcislot_args},${_dsk_controller_type}"
		else
			dsk_controller_args="${dsk_controller_args} -s ${_pcislot_args},${_dsk_controller_type}"
		fi
		_dsk_path=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT dsk_path FROM bhyvedsk WHERE dsk_controller=\"${_dsk_controller_name}\" | ${XARGS_CMD} )

		for dsk_path in ${_dsk_path}; do
			# test for full path. If path not started from '/' - append $data dir
			full_dsk_path=
			prefix=$( substr --pos=0 --len=1 --str="${dsk_path}" )

			if [ "${prefix}" != "/" ]; then
				full_dsk_path="${data}/${dsk_path}"
			else
				full_dsk_path="${dsk_path}"
			fi

			dsk_controller_args="${dsk_controller_args},hd:${full_dsk_path}"
		done
	done

	[ -z "${dsk_controller_args}" ] && return 1
	return 0
}


# -s <n>,nvme,devpath,maxq=#,qsz=#,ioslots=#,sectsz=#,ser=A-Z
compile_nvme_args()
{
	local prefix
	local full_dsk_path
	local sqldelimer=" "
	local _pcislot_args=

	nvme_args=

	cur_nvme_count=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite 'SELECT COUNT(id) FROM bhyve_nvme' | ${AWK_CMD} '{printf $1}' )

	[ "${cur_nvme_count}" = "0" ] && return 1

	${ECHO} "${N1_COLOR}NVMe controller: ${N2_COLOR}${cur_nvme_count}${N0_COLOR}"

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT id,devpath,ram,maxq,qsz,ioslots,sectsz,ser FROM bhyve_nvme LIMIT 1" | while read id devpath ram maxq qsz ioslots sectsz ser; do
		[ -z "${id}" ] && return 0
		echo "export nvme_id=\"${id}\""
		echo "export nvme_devpath=\"${devpath}\""
		echo "export nvme_ram=\"${ram}\""
		echo "export nvme_maxq=\"${maxq}\""
		echo "export nvme_qsz=\"${qsz}\""
		echo "export nvme_ioslots=\"${ioslots}\""
		echo "export nvme_sectsz=\"${sectsz}\""
		echo "export nvme_ser=\"${ser}\""
		nvme_last_id=$(( nvme_last_id + 1 ))
	done ) || err 1 "${N1_COLOR}Error while create nvme map${N0_COLOR}"

	${ECHO} "${N1_COLOR}NVMe controller path: ${N2_COLOR}${nvme_devpath}${N0_COLOR}"

	[ -z "${nvme_devpath}" ] && return 1

	# todo: nvme name, path?
	if ! next_pci_id -n nvme; then
		# no free pci bus
		exit 0
	fi

	_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

	nvme_args="-s ${_pcislot_args},nvme"
	store_bhyve_pci_slot -n nvme -a ${bhyve_pci_index}

	if [ ! -r ${nvme_devpath} ]; then
		${ECHO} "${LDED}Warning: compile_nvme_args: path not available, skipp: ${N2_COLOR}${nvme_devpath}${N0_COLOR}"
		return 1
	fi

	# todo
	# validation for ram>0 and so on..

	nvme_args="${nvme_args},${nvme_devpath},ram=${nvme_ram}"

	[ -z "${nvme_args}" ] && return 1
	return 0
}

# print 5c:f9:dd:76:d5:c4 from 5cf9dd76d5c4
normalize_nic_hwaddr()
{
	local _hwaddr
	[ -z "${1}" ] && return 0

	_hwaddr=$( echo "${1}" | ${TR_CMD} -d ":" | ${SED_CMD} -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/' )
	printf ${_hwaddr}
}


# export arguments for bhyve about nic vms in $nic_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_nic_args; then
# 	echo $nic_args
# else
#	echo "No nic"
# fi
compile_nic_args()
{
	local _id=0 i _res taplist=
	local sqldelimer=" "
	local mybridge
	local net_emul=
	local _parent_mtu=0
	local _ret=
	local _is_bridge
	local _is_graph
	local autoconn_iface=$( /usr/local/cbsd/misc/cbsdsysrc -n cbsd_autoconnect_bridge 2>&1 )
	local _pcislot_args= _pref
	local IFS OIFS
	local _nic_address_id
	local _nic_address_cmd

	. ${subrdir}/vnet.subr		# for get_vm_uplink_interface

	local errmsg=

	# bstart.conf: clear VM hwaddr in global ARP table
	[ -z "${clean_arp_table_by_vm}" ] && clean_arp_table_by_vm="1"

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT id,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr,nic_address,nic_mtu,nic_persistent,nic_ratelimit,nic_flags FROM bhyvenic WHERE jname=\"${jname}\" | while read nic_id nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr nic_address nic_mtu nic_persistent nic_ratelimit nic_flags; do

		_is_graph=0

		case "${nic_driver}" in
			e1000)
				net_emul="e1000"
				;;
			*)
				net_emul="virtio-net"
				;;
			esac

		cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: nic driver: ${nic_driver}, nic_parent: ${nic_parent}, nic_flags [${nic_flags}]

		# when nic_persistent=1 just put it to args
		if [ ${nic_persistent} -eq 1 ]; then
			_pref3=$( substr --pos=0 --len=3 --str=${nic_parent} )
			[ "${_pref3}" != "tap" ] && err 1 "errmsg=\"only tap interface can persistent, not: ${nic_parent}\""
			${IFCONFIG_CMD} ${nic_parent} > /dev/null 2>&1
			[ $? -ne 0 ] && err 1 "errmsg=\"interface ${nic_parent} marked as persistent but not exist\""
			nic_hwaddr="0"
			mytap="${nic_parent}"
			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: ${mytap} marked as persistent
		else	# << if [ ${nic_persistent} -eq 0 ]
			case ${nic_parent} in
				cbsdslirp*)
					# slirp,hostfwd=proto:hostaddr:hostport-guestaddr:guestport
					get_vm_uplink_interface -p ${nic_parent} -u
					;;
				cbsdvale*)
					get_vm_uplink_interface -p ${nic_parent} -u
					;;
				cbsdng_ng*)
					# -s X:Y:Z,[virtio-net,e1000],netgraph,socket=vmX,path=vmbridge:,hook=vmlink,peerhook=link0
					# netgraph,socket=vm0,path=vmbridge:,hook=vm0link,peerhook=link0
					_is_graph=1
					#myargs="-s ${_pcislot_args},${net_emul},netgraph,socket=${jname}_${_id},path=${nic_parent}:,hook=${jname}_${_id}link,peerhook=link${_id}"

					mytap="${nic_parent}:${jname}_${_id}link"
					cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: netgraph backend selected for nic: ${_id}: ${nic_parent}
					;;
				vale*)
					get_vm_uplink_interface -p ${nic_parent} -u
					;;
				*)
					# VPC support
					case "${nic_parent}" in
						vpc-*)
							VPC_ROOT_DIR="${dbdir}/vpc"
							_arg_len=$( strlen ${nic_parent} )
							vpc_name=$( substr --pos=5 --len=${_arg_len} --str="${nic_parent}" )
							_dbpath="${VPC_ROOT_DIR}/${vpc_name}.sqlite"
							[ ! -r ${_dbpath} ] && err 1 "${N1_COLOR}VPC not exist: ${N2_COLOR}${_dbpath}${N0_COLOR}"
							mybridge=
							if ! mybridge=$( get_my_device vpc vpc-${vpc_name} ); then
								err 1 "${N1_COLOR}${CBSD_APP} failed to get VPC bridge: ${mybridge}${N0_COLOR}"
							fi
							${IFCONFIG_CMD} ${mybridge} > /dev/null 2>&1
							_ret=$?
							if [ ${_ret} -ne 0 ]; then
								err 1 "${N1_COLOR}no such VPC bridge interface: ${N2_COLOR}${mybridge}${N0_COLOR}"
							fi
							;;
						*)
							if [ "${nic_parent}" != "0" -o "${nic_parent}" = "auto" ]; then
								_is_bridge=
								[ "${nic_parent}" != "auto" ] && _is_bridge=$( ${IFCONFIG_CMD} ${nic_parent} | ${AWK_CMD} '/groups:/{print $2}' | ${GREP_CMD} -o bridge )
								if [ "${_is_bridge}" != "bridge" ]; then
									# this is not bridge, detect uplink iface
									cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: ${nic_parent} is not bridge
									get_vm_uplink_interface -p ${nic_parent}
									cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: uplink interface selected: ${interface}

									if [ "${interface}" != "disable" ]; then
										# always up parent device
										[ "${interface}" != "auto" ] && ${IFCONFIG_CMD} ${interface} up
										cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: try to get bridge for interface: ${interface}
										if ! mybridge=$( get_my_device bridge ${interface} ); then
											err 1 "errmsg=\"Error:get_my_device_bridge_for_${interface}: ${mybridge}\""
										fi
										cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: bridge interface selected: ${mybridge}
									else
										# don't create/attach to bridge
										mybridge="disable"
									fi
								else
									${IFCONFIG_CMD} ${nic_parent} > /dev/null 2>&1
									_ret=$?
									[ ${_ret} -ne 0 ] && err 1 "errmsg=\"Error:no_such_bridge: ${nic_parent}. Please create it\""
									mybridge="${nic_parent}"
								fi
							else
								# don't create/attach to bridge
								mybridge="disable"
							fi
							;;
					esac
					mytap=$( get_my_tap ${mybridge} )
					_ret=$?
					[ ${_ret} -eq 1 ] && err 1 "errmsg=\"Error:get_my_tap_for_${mybridge}: ${mybridge}\""

					# MTU management, should be before addm
					[ -z "${nic_mtu}" ] && nic_mtu=0	# AUTO
					_parent_mtu=0
					if [ ${nic_mtu} -eq 0 -a "${mybridge}" != "disable" ]; then
						# Get parent MTU size
						_parent_mtu=$( ${toolsdir}/nic_info --nic=${mybridge} --mtu --quiet 2>/dev/null )
						_ret=$?
						cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: mtu set to auto, parent ${mybridge} MTU: ${_parent_mtu}

						if [ ${_ret} -eq 0 ]; then
							# always ifconfig: ioctl SIOCSIFMTU (set mtu): Operation not supported
							# when MTU is same?
							[ -n "${_parent_mtu}" ] && _ret=$( ${IFCONFIG_CMD} ${mytap} mtu ${_parent_mtu} > /dev/null 2>&1 )
						fi
					else
						# Get parent MTU size
						# compare MTU with parent
						#_parent_mtu=$( ${toolsdir}/nic_info --nic=${mybridge} --mtu --quiet 2>/dev/null )
						#_ret=$?
						#if [ ${_ret} -eq 0 ]; then
						#	[ ${nic_mtu} -gt ${_parent_mtu} ]
						#fi
						[ "${nic_mtu}" = "0" ] && nic_mtu="1500"		# case when mybridge = "disable"
						# always ifconfig: ioctl SIOCSIFMTU (set mtu): Operation not supported
						# when MTU is same?
						_ret=$( ${IFCONFIG_CMD} ${mytap} mtu ${nic_mtu} > /dev/null 2>&1 )
						cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: MTU fixed: ${nic_mtu}
					fi

					${IFCONFIG_CMD} ${mytap} description "${jname}-nic${_id}" group vm-port up

					if [ "${mybridge}" != "disable" ]; then
						if [ "${autoconn_iface}" = "NO" ]; then
							${IFCONFIG_CMD} ${mybridge} addm ${mytap} >/dev/null 2>&1
							# export in mytap_X_bridge= as bridge members
							echo "export mytap_${mytap}_bridge=\"${mybridge}\";"
						else
							${IFCONFIG_CMD} ${mybridge} addm ${interface} addm ${mytap} >/dev/null 2>&1
							# export in mytap_X_bridge= as bridge members
							echo "export mytap_${mytap}_bridge=\"${mybridge}\";"
						fi

						if [ "${nic_flags}" != "0" ]; then
							OIFS="${IFS}"
							IFS=","
							for i in ${nic_flags}; do
								IFS="${OIFS}"
								case "${i}" in
									private)
										${IFCONFIG_CMD} ${mybridge} private ${mytap}
										;;
								esac
								IFS=","
							done
							IFS="${OIFS}"
						fi
					fi

					if [ -n "${nic_address}" ]; then
						OIFS="${OIFS}"
						if [ "${nic_address}" != "0" -o "${nic_address}" != "disable" ]; then
							_nic_address_id=0
							_nic_address_cmd=
							IFS=","
							for ip in ${nic_address}; do
								if [ "${ip}" = "DHCP" ]; then
									ip=$( dhcpd )
									[ $? -eq 2 ] && err 1 "${N1_COLOR}No free IP address for DHCP in nodeippool${N0_COLOR}"
								fi
								IFS="${OIFS}"
								ipwmask ${ip}
								iptype ${IWM}
								local _inet=$?
								case "${_inet}" in
									1)
										local proto="inet"
										;;
									2)
										local proto="inet6"
										;;
									*)
										continue
										;;
								esac
								# ipv type + mask
								_res=$( ${IFCONFIG_CMD} ${mytap} ${proto} ${ip} alias )
								_ret=$?
								if [ ${_ret} -ne 0 ]; then
									err 1 "${N1_COLOR}compile_nic_args: error set nic_address: ${_res}${N0_COLOR}"
								fi
								if [ -z "${_nic_address_cmd}" ]; then
									_nic_address_cmd="${IFCONFIG_CMD} ${mytap} ${proto} ${ip} alias"
								else
									_nic_address_cmd="${_nic_address_cmd}; ${IFCONFIG_CMD} ${mytap} ${proto} ${ip} alias"
								fi
								# todo: pass vars to bhyve.conf as nic_address_cmd
								echo "export nic_address_${mytap}_${_nic_address_id}=\"${ip}\""
								_nic_address_id=$(( _nic_address_id + 1 ))
							IFS=","
						done
						IFS="${OIFS}"
						fi

						if [ -n "${_nic_address_cmd}" ]; then
							echo "export nic_address_cmd=\"${_nic_address_cmd}\""
						fi
					fi
					;;
			esac
		fi	# << if [ ${nic_persistent} -eq 0 ]
		# MAC MGMT
		if [ "${nic_hwaddr}" = "0" ]; then
			nic_hwaddr=$( mac_gen 00:a0:98 )
			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: MAC address randomized and updated for nic id ${nic_id}: ${nic_hwaddr}
			cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE bhyvenic SET nic_hwaddr=\"${nic_hwaddr}\" WHERE id=\"${nic_id}\""
		fi

		if [ "${clean_arp_table_by_vm}" = "1" ]; then
			${ARP_CMD} -an | ${AWK_CMD} -v pattern=" ${nic_hwaddr} " '$0 ~ pattern { print $2 }' | ${SORT_CMD} | ${TR_CMD} -d '()' | while read _ip; do
				cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: clean_arp_table_by_vm set to 1: prune ${nic_hwaddr} for ${_ip} in ARP table
				${ARP_CMD} -n -d ${_ip} > /dev/null 2>&1 || true
				#V6
			done
		fi

		# todo: name as descr? or mac as desc?
		if ! next_pci_id -n ${net_emul} -d ${nic_id}; then
			# no free pci bus
			exit 0
		fi

		_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

		if [ ${_is_graph} -eq 1 ]; then
			# tmp hack - to external script with locking/mutual protection
			mylink=$( get-next-ng-port ngid=${nic_parent} )
			ret=$?
			[ ${ret} -ne 0 ] && err 1 "errmsg=\"Error:get_my_tap_for_${nic_parent}: get-next-ng-port ngid=${nic_parent}\""
			[ -z "${mylink}" ] && err 1 "errmsg=\"Error:get_my_tap_for_${nic_parent}: empty: get-next-ng-port ngid=${nic_parent}\" "
			myargs="-s ${_pcislot_args},${net_emul},netgraph,socket=${jname}_${_id},path=${nic_parent}:,hook=${jname}_${_id}link,peerhook=${mylink}"
			#myargs="-s ${_pcislot_args},${net_emul},netgraph,socket=vm1,path=vmbridge:,hook=vm1link,peerhook=link1"
		else
			myargs="-s ${_pcislot_args},${net_emul},${mytap}"
		fi

		# virtio-net support for MTU after r359704
		if [ ${freebsdhostversion} -gt 1300095 ]; then
			# manage MTU on bhyve tap/virtio side
			[ ${nic_mtu} -eq 0 -a ${_parent_mtu} -ne 0 ] && nic_mtu="${_parent_mtu}"		# adjust nic_mtu by parent value

			case "${nic_mtu}" in
				0)
					;;
				*)
					# virtio-net support for MTU after r359704
					myargs="${myargs},mtu=${nic_mtu}"
					;;
			esac
		fi

		if [ "${nic_hwaddr}" != "0" ]; then
			unset mymac
			mymac=$( normalize_nic_hwaddr ${nic_hwaddr} )
			myargs="${myargs},mac=${mymac}"

			echo "export nic_hwaddr${_id}=\"${mymac}\""
		fi
#		if [ "${bhyve_have_net_ratelimit}" = "1" ]; then
#			if [ "${nic_ratelimit}" != "0" ]; then
#				myargs="${myargs},ratelimit=${nic_ratelimit}"
#			fi
#		fi
#		if [ "${nic_hwaddr}" != "0" ]; then
#			unset mymac
#			mymac=$( normalize_nic_hwaddr ${nic_hwaddr} )
#			echo "export nic${_id}=\"-s ${_pcislot_args},${net_emul},${mytap},mac=${mymac}\" ;"
#		else
#			echo "export nic${_id}=\"-s ${_pcislot_args},${net_emul},${mytap}\" ;"
#		fi

		cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: myargs for nic ${_id}: ${myargs}

		echo "export nic${_id}=\"${myargs}\" ;"

		# todo: name as descr? or mac as desc?
		store_bhyve_pci_slot -n ${net_emul} -d ${nic_id} -a ${bhyve_pci_index}
		echo "export mytap${_id}=\"${mytap}\";"

		_id=$(( _id + 1 ))
	done ) || err 1 "${N1_COLOR}Error while creating nic map: ${errmsg}${N0_COLOR}"

	[ -n "${errmsg}" ] && err 1 "${N1_COLOR}Error while creating nic map: ${N2_COLOR}${errmsg}${N0_COLOR}"

	nic_args=

	# export in mytap fill list of vm NICs
	mytap=

	# vale/netgraph skip taplist?
	for i in $( ${SEQ_CMD} 0 31 ); do
		eval T="\$nic$i"
		eval taplist="\$mytap$i"
		[ -z "${T}" ] && break
		[ -z "${taplist}" ] && break
		nic_args="${nic_args} ${T}"
		if [ -z "${mytap}" ]; then
			mytap="${taplist}"
		else
			mytap="${mytap} ${taplist}"
		fi
	done

	# clean_arp extra loop by known IP
#	if [ "${clean_arp_table_by_vm}" = "1" ]; then
#		${ARP_CMD} -an | ${AWK_CMD} -v pattern=" ${nic_hwaddr} " '$0 ~ pattern { print $2 }' | ${SORT_CMD} | ${TR_CMD} -d '()' | while read _ip; do
#			cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: clean_arp_table_by_vm set to 1: prune ${nic_hwaddr} for ${_ip} in ARP table
#			${ARP_CMD} -n -d ${_ip} > /dev/null 2>&1 || true
#			#V6
#		done
#	fi

	cbsdlogger NOTICE ${CBSD_APP}: compile_nic_args for ${jname}: full nic_args: ${nic_args}

	[ -z "${nic_args}" ] && return 1

	return 0
}

# export arguments for bhyve hostbridge_args
compile_hostbridge_args()
{
	local _pcislot_bus=
	local _pcislot_function=
	local _pcislot_pcislot=
	local _pcislot_args=

	# This is usually configured at slot 0
	_pcislot_bus="0"			# 0 to 31
	_pcislot_pcislot=0			# optional, 0 to 255. if not specified, the bus value defaults to 0
	_pcislot_function=0			# optional, 0 to 7. if not specified, the function value defaults to 0

	# always set pcislot
	_pcislot_args="${_pcislot_bus}"

	# skip defaults for bus and func
	for i in ${_pcislot_pcislot} ${_pcislot_function}; do
		[ ${i} -eq 0 ] && continue
		_pcislot_args="${_pcislot_args}:${i}"
	done

	hostbridge_args="-s ${_pcislot_args},${vm_hostbridge}"
}

# export arguments for bhyve lpc_args
compile_lpc_args()
{
	local _pcislot_bus=
	local _pcislot_function=
	local _pcislot_pcislot=
	local _pcislot_args=
	local _sql= _res= _part= _items=
	local _vnc_bind= _vnc_port=

	# todo: backward order
	_pcislot_bus="31"		# 0 to 31
	_pcislot_pcislot=0		# optional, 0 to 255. if not specified, the bus value defaults to 0
	_pcislot_function=0		# optional, 0 to 7. if not specified, the function value defaults to 0

	# hard-coded id
	bhyve_pci_index="${_pcislot_bus}"

	# always set pcislot
	_pcislot_args="${_pcislot_bus}"

	# skip defaults for bus and func
	for i in ${_pcislot_pcislot} ${_pcislot_function}; do
		[ ${i} -eq 0 ] && continue
		_pcislot_args="${_pcislot_args}:${i}"
	done

	_sql="SELECT lpcslot_name,lpcslot_value FROM lpc WHERE lpcslot_value !='0'"

	OIFS="${IFS}"
	IFS="|"
	sqldelimer="|"

	_items=0

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite ${_sql} | while read lpcslot_name lpcslot_value; do
		IFS="${OIFS}"
		echo "lpcslot_name${_items}=\"${lpcslot_name}\""
		echo "lpcslot_value${_items}=\"${lpcslot_value}\""
		echo "_items=${_items}"
		_items=$(( _items + 1 ))
		IFS="|"
	done )
	IFS="${OIFS}"

	_res=

	for i in $( ${SEQ_CMD} 0 ${_items} ); do
		eval lpcslot_name="\$lpcslot_name${i}"
		eval lpcslot_value="\$lpcslot_value${i}"

		case "${lpcslot_name}" in
			bootrom)
				if [ -r ${jailsysdir}/${jname}/BHYVE_UEFI_VARS.fd ]; then
					_part="-l ${lpcslot_name},${lpcslot_value},${jailsysdir}/${jname}/BHYVE_UEFI_VARS.fd,fwcfg=qemu"
				else
					_part="-l ${lpcslot_name},${lpcslot_value}"
				fi
				;;
			com*)
				case "${lpcslot_value}" in
					serial)
						if ! next_nmdm_id ; then
							err 1 "${N1_COLOR}No such next_nmdm_id for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
						fi
						_part="-l ${lpcslot_name},/dev/nmdm${nmdm_index}A"
						if [ ${quiet} -ne 1 ]; then
							[ -z "${_vnc_bind}" ] && _vnc_bind=$( ${HEAD_CMD} -1 ${jailsysdir}/${jname}/vnc_bind )
							[ -z "${_vnc_port}" ] && _vnc_port=$( ${HEAD_CMD} -1 ${jailsysdir}/${jname}/vnc_port )
							${ECHO} "${N1_COLOR}Serial console is enabled: ${N2_COLOR}/dev/nmdm${nmdm_index}B${N0_COLOR}"
							if [ "${cd_vnc_wait}" = "1" ]; then
								${ECHO} "${N1_COLOR}For attach Serial console, use: ${N2_COLOR}nc -z ${_vnc_bind} ${_vnc_port}; cu -l /dev/nmdm${nmdm_index}B${N1_COLOR} (to exit: ${N2_COLOR}~.${N1_COLOR})${N0_COLOR}"
							else
								${ECHO} "${N1_COLOR}For attach Serial console, use: ${N2_COLOR}cu -l /dev/nmdm${nmdm_index}B${N0_COLOR}"
							fi
						fi
						;;
#					tcp)
#						# FreeBSD 15+
#						_part="-l com1,tcp=127.0.0.1:1234"
#						;;
					*)
						_part="-l ${lpcslot_name},${lpcslot_value}"
						;;
				esac
				;;
		esac
		if [ -n "${_res}" ]; then
			_res="${_res} ${_part}"
		else
			_res="${_part}"
		fi
	done


#	echo "MYLPC: [${_res}]" >> /tmp/lpc

	lpc_args="-s ${_pcislot_args},lpc ${_res}"
	store_bhyve_pci_slot -n lpc -a ${bhyve_pci_index}
}

# export arguments for bhyve_cpus
compile_bhyve_cpus_args()
{
	local _sockets _cores _threads _query
	bhyve_cpus="${vm_cpus}"

	# https://svnweb.freebsd.org/base?view=revision&revision=332298
	[ ${freebsdhostversion} -lt 1200061 ] && return 0

	# no topology when single core or vm_cpu_topology empty
	[ "${vm_cpus}" = "1" -o -z "${vm_cpu_topology}" ] && return 0

	# topology not configured
	case "${vm_cpu_topology}" in
		0|default)
			# set CBSD default
			bhyve_cpus="cpus=${vm_cpus},sockets=${vm_cpus},cores=1,threads=1"
			return 0
			;;
	esac

	_query=$( cbsdsqlro local SELECT sockets,cores,threads FROM vm_cpu_topology WHERE name=\"${vm_cpu_topology}\" )
	if [ -z "${_query}" ]; then
		${ECHO} "${N1_COLOR}Warning: no vm_cpu_topology: ${N2_COLOR}${vm_cpu_topology}${N1_COLOR}. Skip.${N0_COLOR}"
		return 0
	fi

	OIFS="${IFS}"
	IFS="|"
	sqllist "${_query}" _sockets _cores _threads
	IFS="${OIFS}"
	if [ -z "${_sockets}" ]; then
		${ECHO} "${N1_COLOR}Warning: vm_cpu_topology ${vm_cpu_topology}: Empty ${N2_COLOR}sockets${N1_COLOR}. Skip.${N0_COLOR}"
		return 0
	fi
	if [ -z "${_cores}" ]; then
		${ECHO} "${N1_COLOR}Warning: vm_cpu_topology ${vm_cpu_topology}: Empty ${N2_COLOR}cores${N1_COLOR}. Skip.${N0_COLOR}"
		return 0
	fi
	if [ -z "${_threads}" ]; then
		${ECHO} "${N1_COLOR}Warning: vm_cpu_topology ${vm_cpu_topology}: Empty ${N2_COLOR}threads${N1_COLOR}. Skip.${N0_COLOR}"
		return 0
	fi

	vm_cpus=$( get_vm_cores_by_topology ${_sockets} ${_cores} ${_threads} )

	if [ -z "${vm_cpus}" ]; then
		bhyve_cpus="1"
	else
		bhyve_cpus="cpus=${vm_cpus},sockets=${_sockets},cores=${_cores},threads=${_threads}"
	fi
	return 0
}

# export arguments for bhyve pci_passthru_args
compile_pci_passthru_args()
{
	local ppt _i
	local _pcislot_args= _class= pcislot_desc_tmp= pcislot_bus_tmp=

	ppt=$( cbsdsqlro local "SELECT ppt FROM bhyveppt WHERE jname='${jname}'" 2>/dev/null )

	[ -z "${ppt}" ] && return 0

	pci_passthru_args=

	if [ "${bhyve_wire_memory}" != "1" ]; then
		${ECHO} "${W1_COLOR}Waning!${N1_COLOR}: PCI Passthru required '-S' options for bhyve: 'Wire guest memory'. Please set: ${N2_COLOR}cbsd bset bhyve_wire_memory=1 jname=${jname}${N0_COLOR}"
		return 0
	fi

	for _i in ${ppt}; do

		_class=$( cbsdsqlro local "SELECT class FROM bhyveppt WHERE ppt='${_i}'" 2>/dev/null )

		if ! next_pci_id -n passthru -d ${_i}; then
			# no free pci bus
			exit 0
		fi

		case "${_class}" in
			display)
				pcislot_desc_tmp=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT pcislot_desc FROM pcibus WHERE pcislot_bus='2'" 2>/dev/null | ${AWK_CMD} '{printf $1}' )
				if [ -n "${pcislot_desc_tmp}" ]; then
					if [ "${pcislot_desc_tmp}" != "${_i}" ]; then
						${ECHO} "${W1_COLOR}Warning: PPT class 'display' recommended for use on BUS2 (-s 2/0/0), but it already used by: ${N2_COLOR}${pcislot_desc_tmp}${N0_COLOR}"
						${ECHO} "${W1_COLOR}Warning: it is recommended to reset the bus settings via: ${N2_COLOR}cbsd bpcibus jname=${jname} mode=reset${N0_COLOR}"
					fi
				else
					# display ppt already exist in map?
					pcislot_bus_tmp=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT pcislot_bus FROM pcibus WHERE pcislot_desc='${_i}'" 2>/dev/null | ${AWK_CMD} '{printf $1}' )
					if [ -n "${pcislot_bus_tmp}" ]; then
						${ECHO} "${W1_COLOR}Warning: PPT class 'display' recommended for use on BUS2 (-s 2/0/0), but it already set to: ${N2_COLOR}${pcislot_bus_tmp}${N0_COLOR}"
						${ECHO} "${W1_COLOR}Warning: it is recommended to reset the bus settings via: ${N2_COLOR}cbsd bpcibus jname=${jname} mode=reset${N0_COLOR}"
					else
						bhyve_pci_index=2
					fi
				fi
				#echo "XXXXX>>>> ${bhyve_pci_index}"
				;;
		esac

		_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

		${ECHO} "${N1_COLOR}Passthru enabled: ${N2_COLOR}${_i}${N0_COLOR}"

		pci_passthru_args="${pci_passthru_args} -s ${_pcislot_args},passthru,${_i}"
		store_bhyve_pci_slot -n passthru -d ${_i} -a ${bhyve_pci_index}
	done

	pci_passthru_args="${pci_passthru_args}"

	. ${subrdir}/virtual.subr

	# check for PCI passthrough
	if check_dmar; then
		err 1 "${N1_COLOR}DMAR or IVRS not found via acpidump: IOMMU/VT-d not enabled ? Please Check you hardware and/or BIOS setting${N0_COLOR}"
	fi

	return 0
}

# export arguments for bhyve efi_args
compile_efi_args()
{
	efi_args=

	# obsolete
	return 0
	case "${vm_efi}" in
		uefi)
			[ ! -r "${efi_firmware}" ] && err 1 "${N1_COLOR}${CBSD_APP}: no such efi_firmware: ${N2_COLOR}${efi_firmware}${N0_COLOR}"
			efi_args="-l bootrom,${efi_firmware}"
			[ -r ${jailsysdir}/${jname}/BHYVE_UEFI_VARS.fd ] && efi_args="${efi_args},${jailsysdir}/${jname}/BHYVE_UEFI_VARS.fd,fwcfg=qemu"
			;;
		uefi_csm)
			[ ! -r "${efi_firmware_csm}" ] && err 1 "${N1_COLOR}${CBSD_APP}: no such efi_firmware_csm: ${N2_COLOR}${efi_firmware_csm}${N0_COLOR}"
			efi_args="-l bootrom,${efi_firmware_csm}"
			[ -r ${jailsysdir}/${jname}/BHYVE_UEFI_VARS.fd ] && efi_args="${efi_args},${jailsysdir}/${jname}/BHYVE_UEFI_VARS.fd"
			;;
		*)
			efi_args=
			;;
	esac

	[ -z "${efi_args}" ] && return 0

	return 0
}

# export arguments for bhyve console_args
compile_console_args()
{
	local com1=0 com2=0

	# obsolete
	return 0

#	case "${vm_console}" in
#		"nmdm")
#
#			if ! next_nmdm_id ; then
#				${ECHO} "${N1_COLOR}No such next_nmdm_id for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
#				return 1
#			fi
#
#			com1=${nmdm_index}
#			com2=$(( nmdm_index + 1 ))
#
#			console_args="-l com1,/dev/nmdm${com1}A -l com2,/dev/nmdm${com2}A"
#			console_nmdm="/dev/nmdm${com1}B /dev/nmdm${com2}B"
#			;;
#		*)
#			console_args="-l com1,stdio"
#			;;
#	esac


	if ! next_nmdm_id ; then
		${ECHO} "${N1_COLOR}No such next_nmdm_id for VMs: ${N2_COLOR}${jname}${N0_COLOR}"
		return 1
	fi

	# -l com1,/dev/nmdm0A

	com1=${nmdm_index}
	com2=$(( nmdm_index + 1 ))
#	console_args="-l com1,stdio -l com2,/dev/nmdm${com2}A"

	console_args="-l com1,/dev/nmdm${com1}A"

	# TCP for FreeBSD 14.3+
#	console_args="-l com1,tcp=0.0.0.0:9999"

#	console_args="-l com1,/dev/nmdm${com1}A -l com2,/dev/nmdm${com2}A"
#	console_nmdm="/dev/nmdm${com1}B /dev/nmdm${com2}B"

	return 0
}

# export arguments for bhyve virtiornd_args
compile_virtiornd_args()
{
	local _pcislot_args=
	virtiornd_args=

	# this is feature of FreeBSD 10.1+
	[ ${freebsdhostversion} -lt 1000730 ] && return 0
	[ -z "${virtio_rnd}" -o "${virtio_rnd}" = "0" ] && return 0

	if ! next_pci_id -n virtio-rnd; then
		# no free pci bus
		exit 0
	fi

	_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

	virtiornd_args="-s ${_pcislot_args},virtio-rnd"
	store_bhyve_pci_slot -n virtio-rnd -a ${bhyve_pci_index}
}

# export arguments for bhyve virtio-9p
compile_virtio_9p_args()
{
	local _pcislot_args=

	# this is feature of FreeBSD 12.+
	[ ${freebsdhostversion} -lt 1000730 ] && return 0
	local shares_num
	local mydb
	local last_share

	shares_num=1
	mydb="${jailsysdir}/${jname}/local.sqlite"

	sqldelimer=" "

	eval $( cbsdsqlro ${mydb} SELECT p9path,p9device,ro,options FROM p9shares 2>/dev/null | while read _p9path _p9device _ro _options; do
		echo "p9path${shares_num}=\"${_p9path}\""
		echo "p9device${shares_num}=\"${_p9device}\""
		echo "ro${shares_num}=\"${_ro}\""
		echo "options${shares_num}=\"${_options}\""
		shares_num=$(( shares_num + 1 ))
	done )

	for last_share in $( ${SEQ_CMD} 1 24 ); do
		unset p9path p9device ro options
		eval p9path="\$p9path$last_share"
		[ -z "${p9path}" ] && break
		eval p9device="\$p9device$last_share"
		eval ro="\$ro$last_share"
		eval options="\$options$last_share"

		unset \$p9path$last_share
		unset \$p9device$last_share
		unset \$ro$last_share
		unset \$options$last_share

		if [ -d ${p9path} ]; then
			if ! next_pci_id -n virtio-9p -d ${p9device}; then
				# no free pci bus
				exit 0
			fi

			_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
			virtio_9p_args="${virtio_9p_args} -s ${_pcislot_args},virtio-9p,${p9device}=${p9path}"
			case "${ro}" in
				1|true)
					${ECHO} "${N1_COLOR}virtio_p9_shares: shared directory enabled: ${H3_COLOR}${p9device} ${N1_COLOR} ${N1_COLOR}-> ${p9path} (${W1_COLOR}RO${N1_COLOR})" 2>&1
					virtio_9p_args="${virtio_9p_args},ro"
					;;
				*)
					;;
			esac

			${ECHO} "  ${N1_COLOR}Use to mount: ${N2_COLOR}mount -t 9p -o trans=virtio ${p9device} /mnt${N0_COLOR}" 2>&1

			case "${options}" in
				0)
					;;
				*)
					${ECHO} "  ${N1_COLOR}Additional 9P options: ${N2_COLOR}${options}${N0_COLOR}"
					virtio_9p_args="${virtio_9p_args},${options}"
					;;
			esac

			store_bhyve_pci_slot -n virtio-9p -d ${p9device} -a ${bhyve_pci_index}
		else
			${ECHO} "${N1_COLOR}virtio_p9_shares error: directory doesn't exist, skipp for share: ${N2_COLOR}${p9path}${N0_COLOR}"
		fi
	done

	return 0
}

# export arguments for bhyve soundhw_args
compile_soundhw_args()
{
	local _pcislot_args=
	local _ret
	soundhw_args=

	# this is feature of FreeBSD 12.+
	[ ${freebsdhostversion} -lt 1300034 ] && return 0
	#if [ ${freebsdhostversion} -lt 1300034 ]; then
	#	${ECHO} "${N1_COLOR}soundhw disabled: please upgrade to FreeBSD ${N2_COLOR}1300034+${N0_COLOR}"
	#	return 0
	#fi

	mydb="${jailsysdir}/${jname}/local.sqlite"

	_ret=$( cbsdsqlro ${mydb} SELECT soundhw FROM settings 2>/dev/null )
	[ -z "${_ret}" -o "${_ret}" = "none" ] && return 0

	local _play _rec

	_play=$( cbsdsqlro ${mydb} SELECT soundhw_play FROM bhyve_soundhw 2>/dev/null )
	_rec=$( cbsdsqlro ${mydb} SELECT soundhw_rec FROM bhyve_soundhw 2>/dev/null )
	echo "OK ${_play} + ${_rec}"

	[ -z "${_play}" ] && return 0
	[ -z "${_rec}" ] && return 0

	# test play
	2>/dev/null echo "0" > ${_play} > /dev/null 2>&1
	_ret=$?
	if [ ${_ret} -ne 0 ]; then
			${ECHO} "${W1_COLOR}Warning: ${N1_COLOR}soundhw configured to: ${N2_COLOR}${_play}${N0_COLOR}"
			${ECHO} "${N1_COLOR}But seems this device not configured (eg: cat <something> > ${_play})${N0_COLOR}"
			${ECHO} "${N1_COLOR}soundhw has been disabled...${N0_COLOR}"
			return 0
	fi

	if ! next_pci_id -n hda; then
		# no free pci bus
		exit 0
	fi

	_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )

	soundhw_args="-s ${_pcislot_args},hda,play=${_play},rec=${_rec}"
	store_bhyve_pci_slot -n hda -a ${bhyve_pci_index}

	${ECHO} "${N1_COLOR}soundhw enabled: play: ${N2_COLOR}${_play}${N1_COLOR}, rec: ${N2_COLOR}${_rec}${N0_COLOR}"
}

# export $live_migration_args and store live migration settings
# into ${jailsysdir}/${jname}/live_migration.conf ascii file
# for later use on source node upon 'bhyvectl --migrate' stage
# variables on conf:
#  - $live_migration_dst_node_ip
#  - $live_migration_src_node_ip
#  - $live_migration_dst_port
#  - $live_migration_src_nodename
#  - $live_migration_dst_nodename
# At the moment, we assume that DFS is being used.
# Therefore, the problem with the transfer of this information
# to the source node at the moment is missing: just read the file
# -a (required) - nodename of the CBSD source node
# -b (required) - nodename of the CBSD recipient node
# -p (required) - port for migration data exchange on recipient node, can be '0' for auto
# -x (optional) - IP of the CBSD source node
# -y (optional) - IP of the CBSD recipiend node
compile_live_migration_args()
{
	local _dst_port _src_nodename _dst_nodename _src_nodename_ip _dst_nodename_ip

	live_migration_args=

	while getopts "a:b:p:x:y:" opt; do
		case "${opt}" in
			a) _src_nodename="${OPTARG}" ;;
			b) _dst_nodename="${OPTARG}" ;;
			p) _dst_port="${OPTARG}" ;;
			x) _src_nodename_ip="${OPTARG}" ;;
			y) _dst_nodename_ip="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	if [ -z "${_dst_port}" ]; then
		${ECHO} "${N1_COLOR}compile_live_migration_args: empty dst_port, please use -p${N0_COLOR}"
		return 1
	fi
	if [ -z "${_src_nodename}" ]; then
		${ECHO} "${N1_COLOR}compile_live_migration_args: empty src_nodename, please use -a${N0_COLOR}"
		return 1
	fi
	if [ -z "${_dst_nodename}" ]; then
		${ECHO} "${N1_COLOR}compile_live_migration_args: empty dst_nodename, please use -a${N0_COLOR}"
		return 1
	fi
	if [ -z "${_src_nodename_ip}" ]; then
		# obtain IP of source node from database
		_src_nodename_ip=$( cbsdsqlro nodes SELECT ip FROM nodelist WHERE nodename=\"${_src_nodename}\" )
		if [ -z "${_src_nodename_ip}" ]; then
			${ECHO} "${N1_COLOR}Failed to obtain _src_nodename_ip for node ${_src_nodename}. Is this node added to cluster? Please use first: ${N2_COLOR}cbsd node mode=add node=${_src_nodename}${N0_COLOR}"
			return 1
		fi
	fi
	if [ -z "${_dst_nodename_ip}" ]; then
		# we assume that this is current node, so use $nodeip
		_dst_nodename_ip=$( getinfo mode=quiet nodeip )
		if [ -z "${_dst_nodename_ip}" ]; then
			${ECHO} "${N1_COLOR}Failed to obtain _dst_nodename_ip for current node. ${N2_COLOR}nodeip${N1_COLOR} specified? You can change this via: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			return 1
		fi
	fi

	# auto _dst_port?
	if [ "${_dst_port}" = "0" ]; then
		# defip
		_dst_port=$( get-next-tcp-port start_port=20000 end_port=21000 )
		[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 20000-21000 range for live migration${N0_COLOR}"

	fi

	# store info into ascii files
	${CAT_CMD} > ${jailsysdir}/${jname}/live_migration.conf << EOF
live_migration_src_nodename="${_src_nodename}"		# nodename of the CBSD source node
live_migration_dst_nodename="${_dst_nodename}"		# nodename of the CBSD destination node
live_migration_dst_port="${_dst_port}"			# port for migration data exchange on destination node
live_migration_src_nodename_ip="${_src_nodename_ip}"	# IP of the CBSD source node
live_migration_dst_nodename_ip="${_dst_nodename_ip}"	# IP of the CBSD destination node
EOF

	${ECHO} "${N1_COLOR}Live migration configuration stored and ready: waiting from: ${H3_COLOR}${_src_nodename}${N1_COLOR}:${N2_COLOR}${_src_nodename_ip} ${N1_COLOR}to${H3_COLOR} me${N1_COLOR}(${H3_COLOR}${_dst_nodename}${N1_COLOR}:${N2_COLOR}${_dst_nodename_ip}${N1_COLOR})${N0_COLOR}"

	live_migration_args="${_src_nodename_ip},${_dst_port}"

	return 0
}

# detach and remove disk image from bhyve VMs
# jname must be set
# $1 dsk_path from sql table (eg: dsk1.vhd )
# require: /usr/local/bin/cbsd as shell
bhyve_remove_dsk()
{
	local dsk="${1}"; shift
	[ -z "${jname}" -o -z "${dsk}" ] && return 0

	[ -r ${jailsysdir}/${jname}/local.sqlite ] && cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM bhyvedsk WHERE dsk_path=\"${dsk}\" AND jname=\"${jname}\"

	if [ "${zfsfeat}" = "1" ]; then
		readconf zfs.conf
		. ${subrdir}/zfs.subr

		if is_getzvol ${data}/${dsk}; then
			${ZFS_CMD} destroy ${is_zvol}
		fi

	elif [ "${hammerfeat}" = "1" ]; then
		err 1 "Hammer not supported yet"
	else
		true
	fi

	[ -f "${data}/${dsk}" -o -h "${data}/${dsk}" ] && ${RM_CMD} -f "${data}/${dsk}"

	return 0
}

# detach and remove NIC from bhyve VMs
# jname must be set
# $1 is id of nic in SQL table
# require: /usr/local/bin/cbsd as shell
bhyve_remove_nic()
{
	local id="${1}"; shift
	[ -z "${jname}" -o -z "${id}" ] && return 0

	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite DELETE FROM bhyvenic WHERE id=\"${id}\" AND jname=\"${jname}\"

	return 0
}

compile_vnc_args()
{
	local vm_port
	local vnc_bind
	local _jailed _jip _ret
	local width height
	local _pcislot_args=
	local _vnc_bind=127.0.0.1
	local _skip_ports i _vms _tmpport

	[ -z "${quiet}" ] && quiet=0

	if [ "${fbuf}" = "0" ]; then
		vnc_password=0		# unset password
		return 0
	fi

	vnc_args=

	if [ ${freebsdhostversion} -lt 1100120 ]; then
		${ECHO} "${N1_COLOR}VNC available only on FreeBSD 11.0+. Disable VNC${N1_COLOR}"
		sleep 2
		return 0
	fi

	case "${vm_vnc_port}" in
		0)
			case "${bhyve_vnc_tcp_bind}" in
				0.0.0.0)
					_vnc_bind="127.0.0.1"
					;;
				::|\[::\])
					_vnc_bind="::1"
					;;
				*)
					_vnc_bind="${bhyve_vnc_tcp_bind}"
					;;
			esac
			# build skip list
			_vms=$( ${miscdir}/sqlcli ${dbdir}/local.sqlite "SELECT jname FROM jails WHERE emulator = 'bhyve'" )
			for i in ${_vms}; do
				[ "${i}" = "${jname}" ] && continue		# its me
				[ ! -r ${jailsysdir}/${i}/local.sqlite ] && continue
				_tmpport=$( cbsdsqlro ${jailsysdir}/${i}/local.sqlite "SELECT vnc_port FROM settings LIMIT 1" )
				if [ -n "${_tmpport}" ]; then
					if ! is_number ${_tmpport}; then
						[ ${_tmpport} -eq 0 ] && continue
						if [ -z "${_skip_ports}" ]; then
							_skip_ports="${_tmpport}"
						else
							_skip_ports="${_skip_ports} ${_tmpport}"
						fi
					else
						continue
					fi
				fi
			done
			vm_port=$( get-next-tcp-port address=${_vnc_bind} start_port=5900 end_port=6900 skip=\"${_skip_ports}\" )
			[ $? -ne 0 ] && err 1 "${N1_COLOR}no free available port in 5900-6900 range for ${_vnc_bind}${N0_COLOR}"
			cbsdlogger NOTICE ${CBSD_APP}: auto-detected free VNC port [skip for: ${_skip_ports}]: ${vm_port} for ${_vnc_bind}
			;;
		1)
			return 1
			;;
		*)
			vm_port="${vm_vnc_port}"
			;;
	esac

	if ! next_pci_id -n fbuf -d /usr/local/cbsd/upgrade/patch/efirefd.fd; then
		# no free pci bus
		exit 0
	fi

	_pcislot_args=$( get_pcislot_args -i ${bhyve_pci_index} )
	# store pci bus map
	store_bhyve_pci_slot -n fbuf -a ${bhyve_pci_index}

	# update vnc_port in SQL and duplicate it in the ascii file
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE settings SET vnc_port='${vm_port}'"
	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${bhyve_vnc_tcp_bind}" ]; then
		vnc_bind="${bhyve_vnc_tcp_bind}"
	else
		vnc_bind="${default_vnc_tcp_bind}"
	fi


	# jailed?
	_jailed=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT jailed FROM settings LIMIT 1" )
	[ -z "${_jailed}" ] && _jailed="0"

	# this is jailed bhyve, try to obtain jail IPs
	if [ "${_jailed}" != "0" ]; then
		_jip=$( jget mode=quiet jname=${_jailed} ip4_addr )
		iptype ${_jip} >/dev/null 2>&1
		_ret=$?
		case ${_ret} in
		1)
			# jail have valid IPv4
			vnc_bind="${_jip}"
			;;
		*)
			# ipv6 or invalid IP
			;;
		esac
	fi

	# add bhyve_vnc_tcp_ipconnect variables, used in
	# vncviewer prompt and exported hooks variables
	case "${vnc_bind}" in
		0.0.0.0)
			if [ -n "${nodeip}" ]; then
				bhyve_vnc_tcp_ipconnect="${nodeip}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		::|\[::\])
			if [ -n "${nodeip6}" ]; then
				bhyve_vnc_tcp_ipconnect="${nodeip6}"
			else
				${ECHO} "${W1_COLOR}Warning, nodeip6 variable is not set. Please use: ${N2_COLOR}cbsd initenv-tui${N0_COLOR}"
			fi
			;;
		*)
			bhyve_vnc_tcp_ipconnect="${vnc_bind}"
			;;
	esac

	echo "${bhyve_vnc_tcp_ipconnect}" > ${jailsysdir}/${jname}/vnc_bind

	if [ -n "${bhyve_vnc_resolution}" ]; then
		width=${bhyve_vnc_resolution%%x*}
		height=${bhyve_vnc_resolution##*x}
	else
		width="${default_vnc_width}"
		heigh="${default_vnc_height}"
	fi

	vnc_args="-s ${_pcislot_args},fbuf,tcp=${vnc_bind}:${vm_port},w=${width},h=${height}"

	[ "${vnc_password}" = "0" ] && unset vnc_password

	if [ "${vm_efi}" != "none" -a ${quiet} -ne 1 ]; then
		${ECHO} "${N1_COLOR}VRDP is enabled. VNC bind/port: ${N2_COLOR}${bhyve_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
		${ECHO} "${N1_COLOR}For attach VM console, use: ${N2_COLOR}vncviewer ${bhyve_vnc_tcp_ipconnect}:${vm_port}${N0_COLOR}"
		${ECHO} "${N1_COLOR}Resolution: ${N2_COLOR}${width}x${height}.${N0_COLOR}"
		[ -n "${vnc_password}" ] && ${ECHO} "${N1_COLOR}VNC pass: ${N2_COLOR}${vnc_password}${N0_COLOR}"

		if [ "${vnc_bind}" = "0.0.0.0" ]; then
			echo
			${ECHO} "${N1_COLOR}Warning!!! You are running a system with open ${N2_COLOR}VNC${N1_COLOR} port to the world wich is not secure${N0_COLOR}"
			${ECHO} "${N1_COLOR}Please use IP filter or balancer with password to restrict ${N2_COLOR}VNC${N1_COLOR} port access${N0_COLOR}"
			${ECHO} "${N1_COLOR}Or change vnc_bind params to ${N2_COLOR}127.0.0.1${N1_COLOR} and reboot VM after maintenance work${N0_COLOR}"
			echo
		fi
	fi

	return 0
}

# -j ${jname}
# return 0 when no VM process exist by $jname
# return 1 when VM process exist with $jname + return $vm_pid and $vm_state variables
# e.g: check_for_bhyve_process -j vm1
check_for_bhyve_process()
{
	local jname b_jname
	unset vm_pid vm_state

	while getopts "j:" opt; do
		case "${opt}" in
			j) jname="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${jname}" ] && return 0

	. ${strings}

	local search_cmd="bhyve: ${jname}"
	local strlen_search_cmd=$( strlen "${search_cmd}" )

	eval $( ${PS_CMD} axopid,state,ucomm,command -ww | while read pid state ucomm command; do

		case ${ucomm} in
				bhyve|grub-bhyve|bhyveload)
				;;
			*)
				continue
				;;
		esac

		cmd_pref=$( substr --pos=0 --len=${strlen_search_cmd} --str="${command}" )
		b_jname=$( echo "${command}" | ${AWK_CMD} '/bhyve: /{print $2}' )
		if [ -z "${b_jname}" ]; then
			# second change: find for: /usr/sbin/bhyve -c ... <jname>
			# this is bhyve stage on early start (e.g vncwait)
			b_jname=$( echo "${command}" | ${AWK_CMD} '/bhyve/{print $NF}' )
		fi
		[ -z "${b_jname}" ] && continue
		[ "${b_jname}" != "${jname}" ] && continue
		echo vm_state=\"${state}\"
		echo vm_pid=\"${pid}\"
		break
	done )

	[ -z "${vm_pid}" ] && return 0
	return 1
}

###
fi
